ggplot(df, aes(x = mpg, fill = am)) + # построим функцию плотности
geom_density(fill = "red")
ggplot(df, aes(x = mpg, fill = am)) + # построим функцию плотности
geom_density()
ggplot(df, aes(x = mpg, fill = am)) + # построим функцию плотности в зависимости от типа коробки передач
geom_density()
ggplot(df, aes(x = mpg, fill = am)) + # построим функцию плотности в зависимости от типа коробки передач
geom_density(alpha = 0.2)
ggplot(df, aes(x = mpg, fill = am)) + # построим функцию плотности в зависимости от типа коробки передач
geom_density(alpha = 0.02)  # alpha определяет прозрачность
ggplot(df, aes(x = mpg, fill = am)) + # построим функцию плотности в зависимости от типа коробки передач
geom_density(alpha = 0.2)  # alpha определяет прозрачность
ggplot(df, aes(x = mpg, fill = am)) + # построим dotplot. Заполним кружочки в зависимости от типа коробки передач
geom_dotplot()
df <- mtcars
library(ggplot2)
ggplot(df, aes(x = am, y = hp))+
geom_point()
ggplot(df, aes(x = am, y = hp))+
geom_boxplot()
df <- mtcars
ggplot(df, aes(x = am, y = hp))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = am, y = hp, col = vs))+
geom_boxplot(aes(group=am))
# сделаем, чтобы номинативные переменные были факторами
# (тип двигателя: v-образный или s-образный)
df$vs <- factor(df$vs , labels = c("V", "S"))  # labels - названия уровней фактора
df$am <- factor(df$am , labels = c("Automatic", "Manual"))  # автоматическая или ручная коробка передач
ggplot(df, aes(x = am, y = hp, col = vs))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = am, y = hp, fill = vs))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = am, y = hp))+
geom_boxplot(aes(group=am, fill = vs))
ggplot(df, aes(x = am, y = hp))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = am, y = hp, col=vs))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = am, y = hp, col=factor(vs)))+
geom_boxplot(aes(group=am))
df <- mtcars
# сделаем, чтобы номинативные переменные были факторами
# (тип двигателя: v-образный или s-образный)
df$vs <- factor(df$vs , labels = c("V", "S"))  # labels - названия уровней фактора
df$am <- factor(df$am , labels = c("Automatic", "Manual"))  # автоматическая или ручная коробка передач
library(ggplot2)
ggplot(df, aes(x = am, y = hp, col=vs))+
geom_boxplot(aes(group=am))
View(df)
ggplot(df, aes(x = am, y = hp, fill=vs))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = am, y = hp, col==vs))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = am, y = hp, col=vs))+
geom_boxplot(aes(group=am))
?col
ggplot(df, aes(x = mpg, y = hp))+
geom_point()
ggplot(df, aes(x = mpg, y = hp))+
geom_point(sizr = 6)  # увеличим размер точек
ggplot(df, aes(x = mpg, y = hp))+
geom_point(size = 6)  # увеличим размер точек
ggplot(df, aes(x = mpg, y = hp, col=vs))+
geom_point(size = 6)  # увеличим размер точек
ggplot(df, aes(x = am, y = hp), col=vs)+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = am, y = hp, col=vs))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = mpg, y = hp, col=vs))+
geom_point(size = 6)  # увеличим размер точек
ggplot(df, aes(x = am, y = hp, col=vs))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = am, y = hp, color=vs))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = mpg, y = hp, col=vs))+
geom_point(size = 6)  # увеличим размер точек
ggplot(df, aes(x = mpg, y = hp, color=vs))+
geom_point(size = 6)  # увеличим размер точек
df <- mtcars
# сделаем, чтобы номинативные переменные были факторами
# (тип двигателя: v-образный или s-образный)
df$vs <- factor(df$vs , labels = c("V", "S"))  # labels - названия уровней фактора
df$am <- factor(df$am , labels = c("Automatic", "Manual"))  # автоматическая или ручная коробка передач
library(ggplot2)
ggplot(df, aes(x = am, y = hp, color=vs))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = mpg, y = hp, color=vs))+
geom_point(size = 6)  # увеличим размер точек
ggplot(df, aes(x = am, y = hp, col=vs))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = am, y = hp, col=vs))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = mpg, y = hp, col=vs, size = qsec))+
geom_point()
# В отличие от базовой графики мы можем сохранять резулльтаты построения графиков в одну перемнную
my_plot <- ggplot(df, aes(x = mpg, y = hp, col=vs, size = qsec))+  # теперь размер точек зависит от времени разгона
geom_point()
ggplot(df, aes(x = am, y = hp, col=vs))+
geom_boxplot(aes(group=am))
my_plot
my_plot2 + geom_boxplot()
my_plot2 <- ggplot(df, aes(x = mpg, y = hp, col=vs))  # можем сделать заготовку
my_plot2 + geom_boxplot()
ggplot(df, aes(x = am, y = hp, col=vs))+
geom_boxplot(aes(group=am))
my_plot2 <- ggplot(df, aes(x = am, y = hp, col=vs))  # можем сделать заготовку
my_plot2 + geom_boxplot()
ggplot(df, aes(x = am, y = hp, col=vs))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = am, y = hp, col=vs))+
geom_boxplot()
ggplot(df, aes(x = am, y = hp))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = am, y = hp))+
geom_boxplot()
ggplot(df, aes(x = am, y = hp))+
geom_boxplot()
my_plot2 + geom_boxplot()
df <- airquality
View(df)
library(ggplot2)
ggplot(df)
ggplot(df)+geom_boxplot()
ggplot(df, aes(x = Month, y = Ozone))+geom_boxplot()
ggplot(df, aes(x = Month[Month==9], y = Ozone))+geom_boxplot()
df[Month==9]
df
subset(df, Month==9)
ggplot(df, aes(x = subset(df, Month==9), y = Ozone))+geom_boxplot()
ggplot(subset(df, Month==9), aes(x = Month, y = Ozone))+geom_boxplot()
ggplot(subset(df, Month==9), aes(x = Month, y = Ozone))+geom_boxplot()
df$Month <- factor(df$Month)  # автоматическая или ручная коробка передач
ggplot(subset(df, Month==9), aes(x = Month, y = Ozone))+geom_boxplot()
library(ggplot2)
df <- airquality
ggplot(subset(df, Month==9), aes(x = Month, y = Ozone))+geom_boxplot()
df$Month <- factor(df$Month)  # Обратите внимание, что для корректного отображения графика ggplot ожидает факторную переменную по оси x.
ggplot(subset(df, Month==9), aes(x = Month, y = Ozone))+geom_boxplot()
ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity")
# Чтобы построить столбчатую диаграмму в ggplot, вам нужно подключить нужный пакет,
# затем преобразовать таблицу HairEyeColor в data frame
library(ggplot2)
mydata <- as.data.frame(HairEyeColor[, , "Female"])
ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity")
ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
obj
obj <- ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
obj
mydata <- as.data.frame(HairEyeColor)
obj <- ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
obj
View(mydata)
ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity", position = "stack") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
obj <- ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity", position = "top") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
obj <- ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity", position = "Top") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
obj <- ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity", position = "Topright") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
mydata <- as.data.frame(HairEyeColor)
HairEyeColor
subset(mydata, Sex = 'Female')
mydata2 <- subset(mydata, Sex = 'Female')
obj <- ggplot(data = mydata2, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity", position = "Topright") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
View(mydata2)
View(mydata)
mydata2 <- subset(as.data.frame(HairEyeColor), Sex = 'Female')
mydata2 <- subset(as.data.frame(HairEyeColor), Sex == 'Female')
mydata <- subset(as.data.frame(HairEyeColor), Sex == 'Female')
ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity", position = "Topright") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity", position = "stack") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity", position = "stack") +
scale_fill_manual(values=c("Brown", "Blue", "Hazel", "Green"))
ggplot(data = mydata, aes(x = Hair, y = Freq, fill = "Eye")) +
geom_bar(stat="identity", position = "stack") +
scale_fill_manual(values=c("Brown", "Blue", "Hazel", "Green"))
ggplot(data = mydata, aes(x = Hair, y = Freq, fill = "Eye")) +
geom_bar(stat="identity", position = "stack") +
scale_fill_manual(values=c("Brown", "Blue", "Hazel", "Green"))
ggplot(data = mydata, aes(x = Hair, y = Freq, fill = "Eye")) +
geom_bar(stat="identity", position = "stack") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
obj <- ggplot(data = mydata, aes(x = Hair, y = Freq, fill = "Eye")) +
geom_bar(stat="identity", position = "stack") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
obj
str(mydata)
str(mydata$Eye)
ggplot(data = mydata, aes(x = Hair, y = Freq, fill = Eye)) +
geom_bar(stat="identity", position = "stack") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
ggplot(data = mydata, aes(x = Hair, y = Freq, fill = Eye)) +
geom_bar(stat="identity", position = "stack", beside=T) +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
ggplot(data = mydata, aes(x = Hair, y = Freq, fill = Eye)) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
# Чтобы построить столбчатую диаграмму в ggplot, вам нужно подключить нужный пакет,
# затем преобразовать таблицу HairEyeColor в data frame
library(ggplot2)
mydata <- subset(as.data.frame(HairEyeColor), Sex == 'Female')
obj <- ggplot(data = mydata, aes(x = Hair, y = Freq, fill = Eye)) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
# Чтобы построить столбчатую диаграмму в ggplot, вам нужно подключить нужный пакет,
# затем преобразовать таблицу HairEyeColor в data frame
library(ggplot2)
mydata <- subset(as.data.frame(HairEyeColor), Sex == 'Female')
obj <- ggplot(data = mydata, aes(x = Hair, y = Freq, fill = Eye)) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
library(ggplot2)
diamonds$price
is.vector(diamonds$price)
mean(diamonds$price)
diamonds$price >= mean(diamonds$price)
diamonds$price < mean(diamonds$price)
if_more_than_mean <- diamonds$price >= mean(diamonds$price)
diamonds$price <- factor(if_more_than_mean, labels = c(0, 1))
diamonds$price
diamonds
diamonds$price <- factor(if_more_than_mean, labels = c(0, 1))
factor(if_more_than_mean, labels = c(0, 1))
library(ggplot2)
diamonds$price
diamonds$factor_price <- factor(diamonds$price >= mean(diamonds$price), labels = c(0, 1))
diamonds$factor_price
library(ggplot2)
diamonds$factor_price <- factor(diamonds$price >= mean(diamonds$price), labels = c(0, 1))
diamonds$factor_carat <- factor(diamonds$carat >= mean(diamonds$carat), labels = c(0, 1))
diamonds
chisq.test(diamonds$factor_price, diamonds$factor_carat)
library(ggplot2)
diamonds$factor_price <- factor(diamonds$price >= mean(diamonds$price), labels = c(0, 1))
diamonds$factor_carat <- factor(diamonds$carat >= mean(diamonds$carat), labels = c(0, 1))
main_stat <- chisq.test(diamonds$factor_price, diamonds$factor_carat)$statistic
mtcars
mtcars$am
mtcars$vs
library(ggplot2)
diamonds$cut
diamonds$color
fisher.test(mtcars$am, mtcars$vs)
?fisher.test()
fisher.test(mtcars$am, mtcars$vs)[1]
fisher_test <- fisher.test(mtcars$am, mtcars$vs)$p.value
fisher_test
?iris
df <- iris
df <- iris
View(df)
str(df)
View(df)
df1 <- subset(df, Species != "setosa")
str(df1)
table(df1$Species)
hist(df1$Sepal.Length)
library(ggplot2)
ggplot(df1, aes(df1$Sepal.Length))+
geom_histogram()
ggplot(df1, aes(df1$Sepal.Length))+
geom_histogram(fill = "white", col = "black")
ggplot(df1, aes(Sepal.Length))+
geom_histogram(fill = "white", col = "black")
hist(df1$Sepal.Length)  # распределение довольно симметричное
ggplot(df1, aes(Sepal.Length))+
geom_histogram(fill = "white", col = "black")
ggplot(df1, aes(Sepal.Length))+
geom_histogram(fill = "white", col = "black", binwidth = 0.4)
ggplot(df1, aes(x = Sepal.Length))+
geom_histogram(fill = "white", col = "black", binwidth = 0.4)
View(df1)
ggplot(df1, aes(x = Sepal.Length))+
geom_histogram(fill = "white", col = "black", binwidth = 0.4)+
facet_grid(Species ~ .)  # позволяет добавить некоторую переменную, которая разобьет наблюдение на группы
ggplot(df1, aes(Sepal.Length, col = Species))+
geom_density()  # график, который рисует функцию плотности
ggplot(df1, aes(Sepal.Length, fill = Species))+
geom_density()  # график, который рисует функцию плотности
ggplot(df1, aes(Sepal.Length, fill = Species))+
geom_density(alpha = 0.5)  # график, который рисует функцию плотности
ggplot(df1, aes(Sepal.Length, fill = Species))+
geom_density(alpha = 0.5)  # график, который рисует функцию плотности (alpha - уровень прозрачности)
ggplot(df1, aes(Species, Sepal.Length))+  # полезно посмотреть, есть ли выбросы в наших группах
geom_boxplot()
shapiro.test(x = df1$Sepal.Length)  # в качестве аргумента принимается вектор значений
View(df1)
shapiro.test(df1$Sepal.Length[df1$Species == "versicolor"])
shapiro.test(df1$Sepal.Length[df1$Species == "virginica"])
bartlett.test(Sepal.Length ~ Species, df1)
bartlett.test(Species ~ Sepal.Length, df1)  # получим результат, сравнение дисперсий в двух группах
bartlett.test(Sepal.Length ~ Species, df1)  # получим результат, сравнение дисперсий в двух группах
library(ggplot2)
library(ggplot2)
?formula
x ~ 2*3
x
2*3
x ~ 2*3
my_vector <- c(1, 2, 3, NA, NA)
NA.position <- function(x){
if (is.na(x)){
return(x[is.na(x)])
}
else{
return(x)
}
}
NA.position(my_vector)
NA.position <- function(x){
if (is.na(x)){
return(x[is.na(x)])
}
else{
return(x)
}
}
NA.position(my_vector)
NA.position <- function(x){
if (x[is.na(x)]){
return(x[is.na(x)])
}
else{
return(x)
}
}
NA.position(my_vector)
which(my_vector)
which(my_vector[is.na(x)])
which(my_vector[is.na(my_vector)])
my_vector[is.na(my_vector)]
is.na(my_vector)
which(is.na(my_vector))
NA.position <- function(x){
# put your code here
return which(is.na(x))
}
which(is.na(x))
NA.position <- function(x){
which(is.na(x))
}
NA.position <- function(x){
which(is.na(x))
}
my_vector <- c(1, 2, 3, NA, NA)
NA.position(my_vector)
my_vector <- c(1, 2, 3, NA, NA)
NA.position1(my_vector)
NA.position1 <- function(x){
if (x[is.na(x)]){
return(x[is.na(x)])
}
else{
return(x)
}
}
for (i in 1:length(x)){
if (is.na(x[i])){
print(i)
}
}
NA.position2 <- function(x){
for (i in 1:length(x)){
if (is.na(x[i])){
print(i)
}
}
}
NA.position1 <- function(x){
if (x[is.na(x)]){
return(x[is.na(x)])
}
else{
return(x)
}
}
my_vector <- c(1, 2, 3, NA, NA)
NA.position1(my_vector)
which(is.na(x))
NA.position1 <- function(x){
which(is.na(x))
}
NA.position2 <- function(x){
for (i in 1:length(x)){
if (is.na(x[i])){
print(i)
}
}
}
my_vector <- c(1, 2, 3, NA, NA)
NA.position1(my_vector)
NA.position2(my_vector)
print(i, end=' ')
my_vector <- c(1, 2, 3, NA, NA)
NA.counter <- function(x){
sum(x[is.na(x)])
}
NA.counter(my_vector)
my_vector <- c(1, 2, 3, NA, NA)
NA.counter <- function(x){
sum(x[is.na(x)])
}
NA.counter(my_vector)
is.na(my_vector)
sum(is.na(x))
NA.counter <- function(x){
sum(is.na(x))
}
NA.counter(my_vector)
NA.counter <- function(x){
return(sum(is.na(x)))
}
NA.counter(my_vector)
mydata <- mtcars
View(mydata)
mtcars[,c("am", "vs")]
setwd("~/R/Projects/Анализ данных в R/2 Статистика в R часть 1")
# напишем функцию, которая из нескольких файлов может сделать один dataframe
dir()  # выводит все элементы, которые лежат в рабочей папке
# напишем функцию, которая из нескольких файлов может сделать один dataframe
dir(pattern = "*.csv")  # выводит все элементы, которые лежат в рабочей папке
grants <- data.frame()
grants <- data.frame()
grants <- data.frame()
for (i in dir(pattern = "*.csv")){
temp_df <- read.csv(i)
grants <- rbind(temp_df, grants)  # добавляет строки
}
View(grants)
read_data <- function(){
df <- data.frame()
for (i in dir(pattern = "*.csv")){
temp_df <- read.csv(i)
df <- rbind(temp_df, df)  # добавляет строки
}
return(df)
}
View(grants)
grants2 <- read_data()
grants2 <- read_data()
setwd("~/R/Projects/Анализ данных в R/2 Статистика в R часть 1/grants")
setwd("~/R/Projects/Анализ данных в R/2 Статистика в R часть 1/grants")
grants <- data.frame()
for (i in dir(pattern = "*.csv")){
temp_df <- read.csv(i)
grants <- rbind(temp_df, grants)  # добавляет строки
}
setwd("~/R/Projects/Анализ данных в R/2 Статистика в R часть 1/grants")
read_data <- function(){
df <- data.frame()
number <- 0
for (i in dir(pattern = "*.csv")){
temp_df <- read.csv(i)
df <- rbind(temp_df, df)  # добавляет строки
number <- number + 1
}
print(paste(as.character(number), "files were combined"))
return(df)
}
grants2 <- read_data()
View(grants)
read_data <- function(){
df <- data.frame()
number <<- 0
for (i in dir(pattern = "*.csv")){
temp_df <- read.csv(i)
df <- rbind(temp_df, df)  # добавляет строки
number <<- number + 1
}
print(paste(as.character(number), "files were combined"))
return(df)
}
grants2 <- read_data()
print(number)
filtered.sum <- function(x){
return(sum(x[x>0]))
}
filtered.sum(c(1, -2, 3, NA, NA))
x <- c(1, -2, 3, NA, NA)
x[x > 0]
sum(x[x > 0], na.rm = T)
filtered.sum <- function(x){
return(sum(x[x > 0], na.rm = T))
}
filtered.sum(c(1, -2, 3, NA, NA))
