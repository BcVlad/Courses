# из приведенного результата видно, что найденное программой оптимальное значение
# λ составило -0.1. Однако с учетом определенной поправочной константы ("fudge factor"),
# учитывающей случайный характер выборки, итоговое значение λ составило 0
# Для применения преобразования на основе λ=  0
# к значениям Amount необходимо воспользоваться функцией predict()
head(predict(AmountTrans, GermanCredit$Amount))
# из приведенного результата видно, что найденное программой оптимальное значение
# λ составило -0.1. Однако с учетом определенной поправочной константы ("fudge factor"),
# учитывающей случайный характер выборки, итоговое значение λ составило 0
# Для применения преобразования на основе λ=  0
# к значениям Amount необходимо воспользоваться функцией predict()
fit <- head(predict(AmountTrans, GermanCredit$Amount))
hist(fit)
# из приведенного результата видно, что найденное программой оптимальное значение
# λ составило -0.1. Однако с учетом определенной поправочной константы ("fudge factor"),
# учитывающей случайный характер выборки, итоговое значение λ составило 0
# Для применения преобразования на основе λ=  0
# к значениям Amount необходимо воспользоваться функцией predict()
fit <- head(predict(AmountTrans, GermanCredit$Amount))
hist(fit)
head(predict(AmountTrans, GermanCredit$Amount))
hist(predict(AmountTrans, GermanCredit$Amount))
library(ggplot2)
library(dplyr)
diamonds
diamonds_2 <- sample_n(diamonds, 500)
library(ggplot2)
library(dplyr)
diamonds_2 <- sample_n(diamonds, 500)
View(diamonds_2)
diamonds
qplot(x = price, y = carat, data = diamonds_2) +
geom_smooth(method = lm)
fit1 <- lm(carat ~ price, diamonds_2)
coefficients(fit1)
plot(fit1)
plot(fit1)
df <- diamonds
df <- diamonds
library(ggplot2)
library(dplyr)
df <- diamonds
diamonds
# разберем пример логорифмической трансформации
# нарисуем логарифмическую трансформацию исходных данных
qplot(x = price, y = carat, data = diamonds_2) +
geom_smooth(method = lm)
diamonds_2 <- sample_n(diamonds, 500)  # взять первые 500 строк из набора данных
qplot(x = price, y = carat, data = diamonds_2) +
geom_smooth(method = lm)
# разберем пример логорифмической трансформации
# нарисуем логарифмическую трансформацию исходных данных
qplot(x = log(price), y = log(carat), data = diamonds_2) +
geom_smooth(method = lm)
# ситуация улучшилась, есть линейность данных, а проблема гетероскедастичности вроде решена
bptest
install.packages("knitr")
install.packages("sandwich")
install.packages("lmtest")
# ситуация улучшилась, есть линейность данных, а проблема гетероскедастичности вроде решена
bptest(lm(price ~ carat, diamonds_2))
# ситуация улучшилась, есть линейность данных, а проблема гетероскедастичности вроде решена
library("lmtest") # тест Бройша-Пагана
bptest(lm(price ~ carat, diamonds_2))
diamonds_2 <- sample_n(diamonds, 500)  # взять первые 500 строк из набора данных
qplot(x = price, y = carat, data = diamonds_2) +
geom_smooth(method = lm)
fit1 <- lm(carat ~ price, diamonds_2)
coefficients(fit1)
plot(fit1)
geom_smooth(method = lm)
bptest(lm(price ~ carat, diamonds_2)) # p.value < 0.05
bptest(lm(price ~ carat, diamonds_2)) # p.value < 0.05
bptest(lm(price ~ carat, diamonds)) # p.value < 0.05
bptest(lm(price ~ carat, diamonds_2)) # p.value < 0.05
library(lmtest) # тест Бройша-Пагана
bptest(lm(price ~ carat, diamonds_2)) # p.value < 0.05
bptest(lm(log(price) ~ log(carat), diamonds_2))
fit2 <- lm(log(carat) ~ log(price), diamonds_2)
shapiro.test(fit2$residuals)
fit2 <- lm(log(carat) ~ log(price), diamonds_2)
library(dplyr)
library(dplyr)
set.seed(42)
set.seed(42)
d <- data_frame(y = rnorm(30),
x_1 = rnorm(30),
x_2 = x_1,
x_3 = rnorm(30))
View(d)
View(d)
fit <- lm(y ~ ., d)
summary(fit)
fit <- lm(y ~ ., d)
# нарисуем скаттер плот
pairs(d)
summary(fit)
summary(fit)
d
tibble(y = rnorm(30),
x_1 = rnorm(30),
x_2 = x_1,
x_3 = rnorm(30))
install.packages(c("backports", "ggplot2", "htmlTable", "httr", "isoband", "jsonlite", "mnormt", "pillar", "pkgbuild", "processx", "Rcpp", "RcppArmadillo", "rlang", "tibble", "vctrs"))
library(dplyr)
tibble(y = rnorm(30),
x_1 = rnorm(30),
x_2 = x_1,
x_3 = rnorm(30))
d <- data_frame(y = rnorm(30),
x_1 = rnorm(30),
x_2 = x_1,
x_3 = rnorm(30))
d <- data_frame(y = rnorm(30),
x_1 = rnorm(30),
x_2 = x_1,
x_3 = rnorm(30))
d
x <- c(1,2,3,4,5,6)
y <- x^2
z <- x^3
cor.test(x)
cor.test(x = x, y = y)
cor.test(x = x, y = z)
x <- c(1, 2, -5, -10, -19, 9, -183, -11)
y <- x
cor.test(x = x, y = y)
y <- abs(x)
cor.test(x = x, y = y)
x <- c(1, 2, -5, -10, -19, 9, -183, -11, 18, 195, 65)
y <- abs(x)
cor.test(x = x, y = y)
x <- c(1, 2, -5, -10, -19, 9, -183, -11, 18, 195, 65, 1000)
cor.test(x = x, y = y)
x <- c(1, 2, -5, -10, -19, 9, -183, -11, 18, 195, 65, 1000)
y <- abs(x)
cor.test(x = x, y = y)
x <- c(1, 2, -5, -10, -19, 9, -183, -11, 18, 195, 65)
y <- abs(x)
cor.test(x = x, y = y)
happiness <- c(5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90)
statistic <- c(8, 12, 13, 18, 29, 30, 36, 39, 41, 55, 56, 65, 67, 75, 75, 79, 89, 100)
salary <- с(2500, 2750, 2800, 2800,  2850, 2900, 3150,  3256,  3200,  3390, 3450,  3685,  3700, 3800, 4200, 4345, 4500, 4900)
happiness <- c(5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90)
statistic <- c(8, 12, 13, 18, 29, 30, 36, 39, 41, 55, 56, 65, 67, 75, 75, 79, 89, 100)
salary <- с(2500, 2750, 2800, 2800,  2850, 2900, 3150, 3256, 3200,  3390, 3450,  3685,  3700, 3800, 4200, 4345, 4500, 4900)
salary <- c(2500, 2750, 2800, 2800,  2850, 2900, 3150, 3256, 3200,  3390, 3450,  3685,  3700, 3800, 4200, 4345, 4500, 4900)
cor.test(x = happiness, y = statistic)
cor.test(x = happiness, y = salary)
cor.test(x = statistic, y = salary)
rnorm(30)
rnorm(30, mean = 2500)
rnorm(30, mean = 2500, sd = 250)
rnorm(30, mean = 2500, sd = 500)
salary <- rnorm(30, mean = 2500, sd = 500)
cor.test(x = statistic, y = salary)
rnorm(18, mean = 2500, sd = 500)
salary <- rnorm(30, mean = 2500, sd = 500)
salary <- rnorm(18, mean = 2500, sd = 500)
cor.test(x = statistic, y = salary)
rnorm(30, mean = 2500, sd = 500)
df <- data.frame(happiness = happiness, statistic = statistic, salary = salary)
View(df)
salary <- c(2500, 2750, 2800, 2800,  2850, 2900, 3150, 3256, 3200,  3390, 3450,  3685,  3700, 3800, 4200, 4345, 4500, 4900)
df <- data.frame(happiness = happiness, statistic = statistic, salary = salary)
View(df)
aov(happiness ~ statistic, df)
fit <- aov(happiness ~ statistic, df)
summary(fit)
summary(fit)
fit <- anova(aov(happiness ~ statistic, df))
summary(fit)
fit <- lm(happiness ~ statistic, df)
summary(fit)
fit <- lm(happiness ~ statistic + salary, df)
summary(fit)
salary <- c(2500, 2750, 2800, 2800,  2850, 2900, 3150, 3256, 3200,  3390, 3450,  3685,  3700, 3800, 4200, 4345, 4500, 4900)
fit <- lm(happiness ~ statistic + salary, df)
summary(fit)
View(df)
happiness <- c(5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90)
statistic <- c(8, 12, 13, 18, 29, 30, 36, 39, 41, 55, 56, 65, 67, 75, 75, 79, 89, 100)
salary <- c(2500, 2750, 2800, 2800,  2850, 2900, 3150, 3256, 3200,  3390, 3450,  3685,  3700, 3800, 4200, 4345, 4500, 4900)
df <- data.frame(happiness = happiness, statistic = statistic, salary = salary)
fit <- lm(happiness ~ statistic, df)
summary(fit)
fit <- lm(happiness ~ statistic + salary, df)
summary(fit)
fit <- lm(happiness ~ statistic * salary, df)
summary(fit)
fit <- lm(happiness ~ statistic, df)
fit <- lm(happiness ~ statistic + salary, df)
summary(fit)
cor.test(x = statistic, y = salary)
cor.test(x = statistic, y = salary)
happiness <- c(5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90)
statistic <- c(8, 12, 13, 18, 29, 30, 36, 39, 41, 55, 56, 65, 67, 75, 75, 79, 89, 100)
salary <- c(2500, 2750, 2800, 2800,  2850, 2900, 3150, 3256, 3200,  3390, 3450,  3685,  3700, 3800, 4200, 4345, 4500, 4900)
df <- data.frame(happiness = happiness, statistic = statistic, salary = salary)
fit <- lm(happiness ~ statistic, df)
summary(fit)
fit <- lm(happiness ~ salary, df)
summary(fit)
fit <- lm(happiness ~ salary, df)
summary(fit)
cor.test(x = happiness, y = salary)
fit <- lm(happiness ~ salary, df)
summary(fit)
library(ggplot2)
ggplot(df, aes(x = salary, y = happiness)) +
geom_point() +
geom_smooth(method = 'lm')
cor.test(x = happiness, y = salary)
cor.test(x = salary, y = happiness)
fit <- lm(happiness ~ salary, df)
summary(fit)
fit <- lm(happiness ~ statistic + salary, df)
summary(fit)
fit <- lm(happiness ~ salary, df)
summary(fit)
fit <- lm(happiness ~ statistic + salary, df)
summary(fit)
fit <- lm(happiness ~ statistic * salary, df)
summary(fit)
fit <- lm(happiness ~ statistic, df)
summary(fit)
fit2 <- lm(happiness ~ salary, df)
summary(fit2)
fit3 <- lm(happiness ~ statistic + salary, df)
summary(fit3)
fit4 <- lm(happiness ~ statistic * salary, df)
summary(fit4)
head(cars)
qplot(x = speed, y = dist, data = cars)
fit1 <- lm(dist ~ speed, cars)
summary(fit1)
cars <- mutate(cars, speed_2 = speed^2, speed_3 = speed^3)
cars <- mutate(cars, speed_2 = speed^2, speed_3 = speed^3)
head(cars)
cars <- mutate(cars, speed_2 = speed^2, speed_3 = speed^3)
head(cars)
pairs(cars)
fit2 <- lm(dist ~ ., cars)
summary(fit2)
fit <- lm(mpg ~ ., mtcars)
fit <- lm(mpg ~ ., mtcars)
summary(fit)$coefficients['hp', 'Std. Error']
S.2 <- var(fit$residuals)
fit$residuals
var(fit$residuals)
subfit <- lm(hp ~ cyl + disp + drat + wt + qsec + vs + am + gear + carb, mtcars)
summary(subfit)
R.2 <- summary(subfit)$r.squared
summary(subfit)$r.squared
var.b <- S.2 / ( (n-1) * var.x * (1-R.2) )
# n - число измерений:
n <- nrow(mtcars)
var.b <- S.2 / ((n-1) * var.x * (1-R.2))
var.x <- var(mtcars$hp)
var.b <- S.2 / ((n-1) * var.x * (1-R.2))
# Получилась дисперсия коэффициента, а нам нужна стандартная ошибка,
# то есть корень от дисперсии:
sqrt(var.b)
# Получилось не совсем 0.02176858 , которое было в summary. Проблема в том,
# что R считает дисперсию не по (n - 1), как в нашей формуле, а по (n - (k+1)),
# где k - это число зависимых переменных. Немного меняем формулу:
k <- ncol(mtcars) - 1
var.b <- S.2 / ( (n-(k+1)) * var.x * (1-R.2) )
sqrt(var.b)
# Подобранные коэффициенты не верны с точки зрения логики
# все переменные статистически не значимы
# (т.е. отклоняем, что скорость, квадрат, куб скорости связаны с тормозным путем),
# хотя R^2 больше и статистически значим
###############################################################################################
# Разберем еще один пример
head(swiss)
fit_1 <- lm(Fertility ~ ., swiss)
summary(fit_1)
?swiss
cor.test(Fertility ~ Examination)
cor.test(Fertility ~ Examination, swiss)
cor.test(~ Fertility + Examination, swiss)
###############################################################################################
# разберем еще один практический пример
head(swiss)
fit_1 <- lm(Fertility ~ ., swiss)
summary(fit1)
summary(fit1)
fit_1 <- lm(Fertility ~ ., swiss)
summary(fit1)
###############################################################################################
# разберем еще один практический пример
head(swiss)
fit_1 <- lm(Fertility ~ ., swiss)
summary(fit1)
summary(fit_1)
cor.test(~ Fertility + Examination, swiss)
vif(fit_1)
###############################################################################################
# разберем еще один практический пример
library(dplyr)
vif(fit_1)
fit_2 <- lm(Fertility ~ ., select(swiss, -Examination))
summary(fit_2)
vif(fit_2)
install.packages("car")
###############################################################################################
# разберем еще один практический пример
library(car)
install.packages("carData")
###############################################################################################
# разберем еще один практический пример
library(car)
###############################################################################################
# разберем еще один практический пример
library(carData)
vif(fit_2)
install.packages(c("backports", "RcppArmadillo", "remotes"))
###############################################################################################
# разберем еще один практический пример
library(car)
install.packages("carData")
###############################################################################################
# разберем еще один практический пример
library(carData)
library(car)
install.packages("Rcpp")
library(car)
install.packages(c("backports", "RcppArmadillo"))
install.packages(c("backports", "RcppArmadillo"))
updateR()
updateR()
update.packages(checkBuilt = TRUE)
install.packages("car", dependencies=TRUE)
library(car)
###############################################################################################
# разберем еще один практический пример
library(carData)
library(car)
library(car)
install.packages("lme4", repos="http://cran.rstudio.com/",type = "binary", dependencies=TRUE)
install.packages("nlme", repos="http://cran.rstudio.com/",type = "binary", dependencies=TRUE)
packageurl <- "https://cran.r-project.org/src/contrib/Archive/pbkrtest/pbkrtest_0.4-4.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
install.packages("pbkrtest")
library(car)
install.packages(packageurl, repos=NULL, type="source")
install.packages("data.table")
install.packages("data.table")
###############################################################################################
# разберем еще один практический пример
library(carData)
library(car)
library(car)
head(swiss)
vif(fit_1)
update.packages(ask = FALSE, checkBuilt = TRUE)
install.packages(c("backports", "RcppArmadillo"))
installR()
###############################################################################################
# разберем еще один практический пример
library(carData)
library(car)
library(car)
vif(fit_1)
fit <- lm(mpg ~ ., mtcars)
summary(fit)$coefficients['hp', 'Std. Error']  # 0.02176858
S.2 <- var(fit$residuals)  # рассчитываем дисперсию остатков
# n - число измерений:
n <- nrow(mtcars)
var.x <- var(mtcars$hp)
subfit <- lm(hp ~ cyl + disp + drat + wt + qsec + vs + am + gear + carb, mtcars)
summary(subfit)
R.2 <- summary(subfit)$r.squared
var.b <- S.2 / ((n-1) * var.x * (1-R.2))
# Получилась дисперсия коэффициента, а нам нужна стандартная ошибка,
# то есть корень от дисперсии:
sqrt(var.b)
# Получилось не совсем 0.02176858 , которое было в summary. Проблема в том,
# что R считает дисперсию не по (n - 1), как в нашей формуле, а по (n - (k+1)),
# где k - это число зависимых переменных. Немного меняем формулу:
k <- ncol(mtcars) - 1
var.b <- S.2 / ( (n-(k+1)) * var.x * (1-R.2) )
sqrt(var.b)
# Задачи:
iris
fit <- lm(Petal.Width ~ Petal.Length + Sepal.Width, iris)
fit3 <- lm(Petal.Width ~ Petal.Length + Sepal.Width, iris)
summary(fit3)
library(ggplot2)
library(dplyr)
library(lmtest) # тест Бройша-Пагана
diamonds_2 <- sample_n(diamonds, 500)  # взять первые 500 строк из набора данных
qplot(x = price, y = carat, data = diamonds_2) +
geom_smooth(method = lm)
fit1 <- lm(carat ~ price, diamonds_2)
coefficients(fit1)
plot(fit1)
df <- mtcars
View(df)
fit <- lm(mpg ~ ., mtcars)
library(ggplot2)
library(dplyr)
library(lmtest) # тест Бройша-Пагана
df <- mtcars
fit <- lm(mpg ~ ., mtcars)
summary(fit)
str(summary(fit))
fit$residuals
fit2 <- lm(fit$residuals ~ ., mtcars)
summary(fit2)
df <- mtcars
fit <- lm(mpg ~ ., mtcars)
df <- mtcars
fit <- lm(mpg ~ ., mtcars)
fit2 <- lm(fit$residuals ~ -c(mpg), mtcars)
summary(fit2)
fit2 <- lm(fit$residuals ~ -c(1), mtcars)
summary(fit2)
fit2 <- lm(fit$residuals ~ -c(1), mtcars)
df <- mtcars
fit <- lm(mpg ~ ., mtcars)
fit2 <- lm(fit$residuals ~ -c(2:11), mtcars)
fit2 <- lm(fit$residuals ~ mtcars[2:11], mtcars)
fit2 <- lm(fit$residuals ~ c[2:11], mtcars)
fit2 <- lm(fit$residuals ~ c(2:11), mtcars)
#  Subsetting
c(2:100)
fit2 <- lm(fit$residuals ~ c(2:11), mtcars)
fit$residuals
length(fit$residuals)
length(df[1])
length(df[,1])
fit2 <- lm(fit$residuals ~ c(2:11), mtcars)
fit2 <- lm(as.vector(fit$residuals) ~ c(2:11), mtcars)
as.vector(fit$residuals)
fit2 <- lm(as.vector(fit$residuals) ~ c(2:11), df)
as.vector(fit$residuals)
fit2 <- lm(as.vector(fit$residuals) ~ c(2:11), df)df(c(2:11))
df(c(2:11))
df[c(2:11)]
fit2 <- lm(as.vector(fit$residuals) ~ c(2:11), fit1)
fit2 <- lm(as.vector(fit$residuals) ~ c(2:11), fit)
fit2 <- lm(as.vector(fit$residuals) ~ c(2:11), df)
fit$residuals
fit$residuals^2
fit2 <- lm(as.vector(fit$residuals^2) ~ ., df)
summary(fit2)
fit2 <- lm(as.vector(fit$residuals^2) ~ -mpg, df)
summary(fit2)
fit2 <- lm(as.vector(fit$residuals^2) ~ c(-mpg), df)
summary(fit2)
fit2 <- lm(as.vector(fit$residuals^2) ~ -c(mpg)., df)
fit2 <- lm(as.vector(fit$residuals^2) ~ [2:11], df)
df
fit2 <- lm(as.vector(fit$residuals^2) ~ [2:11], df)
fit <- lm(mpg ~ ., mtcars)
summary(fit)
fit2 <- lm(as.vector(fit$residuals^2) ~ ., df)
summary(fit2)
?lm
df <- subset(df, -c(1))
df2 <- subset(df, -mpg)
df2 <- df[, -"mpg"]
df2 <- df[-"mpg"]
fit2 <- lm(as.vector(fit$residuals^2) ~ 2:11, df)
fit2 <- lm(as.vector(fit$residuals^2) ~ c(2:11), df)
c(2:11)
df[2:11]
df[,2:11]
fit2 <- lm(as.vector(fit$residuals^2) ~ cyl+disp+hp+drat+wt+qsec+vs+am+gear+carb, df)
summary(fit2)
df2 <- mtcars[, 2:]
df2 <- mtcars[, 2]
df2
ncol(mtcars)
cols <- ncol(mtcars)
df2 <- mtcars[, 2:cols]
View(df2)
fit2 <- lm(as.vector(fit$residuals^2) ~ ., df2)
summary(fit2)
fit <- lm(mtcars[1] ~ ., mtcars)
fit <- lm(mtcars[,1] ~ ., mtcars)
fit2 <- lm(as.vector(fit$residuals^2) ~ ., df2)
fit2 <- lm(fit$residuals^2 ~ ., df2)
summary(fit2)
fit2 <- lm(as.vector(fit$residuals^2) ~ ., df2)
summary(fit2)
fit <- lm(mpg ~ ., mtcars)
fit2 <- lm(as.vector(fit$residuals^2) ~ ., df2)
df2 <- mtcars[, 2:cols]
summary(fit2)
fit <- lm(df[, 1] ~ ., mtcars)
fit2 <- lm(as.vector(fit$residuals^2) ~ ., df2)
summary(fit2)
summary(fit)
fit <- lm(df[, 1] ~ ., df2)
fit2 <- lm(as.vector(fit$residuals^2) ~ ., df2)
summary(fit2)
fit2 <- lm(fit$residuals^2 ~ ., df2)
summary(fit2)
str(summary(fit2))
fit2$r.squared
summary(fit2)$r.squared
hetero_test <-  function(df){
cols <- ncol(df)
df2 <- df[, 2:cols]
fit <- lm(df[, 1] ~ ., df2)
fit2 <- lm(fit$residuals^2 ~ ., df2)
return(summary(fit2)$r.squared)
}
hetero_test(mtcars)
