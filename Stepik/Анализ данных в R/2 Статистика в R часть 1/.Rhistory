View(df)
df <- subset(diamonds, cut == "Ideal" & carat == 0.46)
View(df)
df <- subset(diamonds, cut == "Ideal" & carat == 0.46)
fit <- lm(price ~ depth, df)
summary(fit)
fit_coef <- fit$coefficients # коэффициенты модели
fit_coef
df <- mtcars
cor.test(x = df$mpg, y = df$hp)
cor.test(x = df$mpg, y = df$hp)$p.value
df
lm(mtcars[, 1] ~ mtcars[, 2])
lm(mtcars[, 1] ~ mtcars[, 2], mtcars)
summary(lm(mtcars[, 1] ~ mtcars[, 2], mtcars))
View(df)
regr.calc <- function(x){
if (cor.test(x = x[, 1], y = x[, 2])$p.value < 0.05){
f <- lm(x[, 1] ~ x[, 2], x)
return(x$fit <- predict(f, x[, 2]))
} else {
return("There is no sense in prediction")
}
}
my_df = iris[,1:2] # на вход подаем данные iris только с переменными Sepal.Length и Sepal.Width
regr.calc(iris[,1:2]) # переменные значимо не коррелируют
my_df = iris[,c(1,4)] # на вход подаем данные iris только с переменными Sepal.Length и Petal.Width
regr.calc(my_df) # переменные значимо коррелируют
df <- iris[,c(1,4)]
View(df)
f <- lm(df[, 1] ~ df[, 2], df)
f
summary(df)
lm(df[, 1] ~ df[, 2], df)
x <- predict(f, x[, 2])
predict(f, x[, 2])
predict(f, df[, 2])
x <- predict(f, df[, 1])
regr.calc <- function(x){
if (cor.test(x = x[, 1], y = x[, 2])$p.value < 0.05){
ft <- lm(x[, 1] ~ x[, 2], x)
return(x$fit <- x$fitted.values[, 1])
} else {
return("There is no sense in prediction")
}
}
my_df = iris[,c(1,4)] # на вход подаем данные iris только с переменными Sepal.Length и Petal.Width
regr.calc(my_df) # переменные значимо коррелируют
regr.calc <- function(x){
if (cor.test(x = x[, 1], y = x[, 2])$p.value < 0.05){
ft <- lm(x[, 1] ~ x[, 2], x)
x$fit <- x$fitted.values[, 1]
return(x)
} else {
return("There is no sense in prediction")
}
}
my_df = iris[,1:2] # на вход подаем данные iris только с переменными Sepal.Length и Sepal.Width
regr.calc(iris[,1:2]) # переменные значимо не коррелируют
my_df = iris[,c(1,4)] # на вход подаем данные iris только с переменными Sepal.Length и Petal.Width
regr.calc(my_df) # переменные значимо коррелируют
regr.calc <- function(x){
if (cor.test(x = x[, 1], y = x[, 2])$p.value < 0.05){
ft <- lm(x[, 1] ~ x[, 2], x)
x$fit <- x$fitted.values
return(x)
} else {
return("There is no sense in prediction")
}
}
my_df = iris[,c(1,4)] # на вход подаем данные iris только с переменными Sepal.Length и Petal.Width
regr.calc(my_df) # переменные значимо коррелируют
regr.calc <- function(x){
if (cor.test(x = x[, 1], y = x[, 2])$p.value < 0.05){
ft <- lm(x[, 1] ~ x[, 2], x)
x$fit <- x$fitted.values[, 2]
return(x)
} else {
return("There is no sense in prediction")
}
}
my_df = iris[,c(1,4)] # на вход подаем данные iris только с переменными Sepal.Length и Petal.Width
regr.calc(my_df) # переменные значимо коррелируют
?lm
regr.calc <- function(x){
if (cor.test(x = x[, 1], y = x[, 2])$p.value < 0.05){
ft <- lm(x[, 1] ~ x[, 2], x)
x$fit <- ft$fitted.values[, 1]
return(x)
} else {
return("There is no sense in prediction")
}
}
my_df = iris[,c(1,4)] # на вход подаем данные iris только с переменными Sepal.Length и Petal.Width
regr.calc(my_df) # переменные значимо коррелируют
regr.calc <- function(x){
if (cor.test(x = x[, 1], y = x[, 2])$p.value < 0.05){
ft <- lm(x[, 1] ~ x[, 2], x)
x$fit <- ft$fitted.values
return(x)
} else {
return("There is no sense in prediction")
}
}
my_df = iris[,c(1,4)] # на вход подаем данные iris только с переменными Sepal.Length и Petal.Width
regr.calc(my_df) # переменные значимо коррелируют
library(ggplot2)
iris
library(ggplot2)
my_plot <- ggplot(iris, aes(x = Sepal.Width, y = Petal.Width, col=factor(Species))) +
geom_point() +
geom_smooth(method = "lm") +
facet_grid(.~Species)
my_plot <- ggplot(iris, aes(x = Sepal.Width, y = Petal.Width, col=factor(Species))) +
geom_point() +
geom_smooth(method = "lm") +
facet_grid(.~Species)
my_plot
my_plot <- ggplot(iris, aes(x = Sepal.Width, y = Petal.Width, col=factor(Species))) +
geom_point() +
geom_smooth(method = "lm")
my_plot
setwd("~/R/Projects/Основы статистики. Часть 2/1 Анализ номинативных данных")
?mode
v <- c(1, 2, 3, 3, 3, 4, 5)
v <- c(1, 2, 3, 3, 3, 4, 5)
for (i in 1:length(v)){
print(i)
}
table(v)
v <- c(1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5)
table(v)
table(v)
max(table(v))
which(table(v) == max(table(v)))
v <- c(1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5)
which(table(v) == max(table(v)))
v <- c(1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5)
which(table(v) == max(table(v)))
v <- c(1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 9, 9, 9)
which(table(v) == max(table(v)))
table(v)
which(table(v) == max(table(v)))
names(which(table(v) == max(table(v))))
names(which(table(v) == max(table(v))))
?apply
sapply(names(which(table(v) == max(table(v)))), function(x) numeric(x))
names(which(table(v) == max(table(v)))), function(x) numeric(x)
names(which(table(v) == max(table(v))))
numeric(names(which(table(v) == max(table(v)))))
numeric(names(which(table(v) == max(table(v)))))
num(names(which(table(v) == max(table(v)))))
sapply(names(which(table(v) == max(table(v)))), function(x) x+'a')
sapply(names(which(table(v) == max(table(v)))), function(x) x)
sapply(names(which(table(v) == max(table(v)))), function(x) x)
sapply(names(which(table(v) == max(table(v)))), function(x) x[1,])
numeric(names(which(table(v) == max(table(v)))))
v <- c(1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 9, 9, 9)
names(which(table(v) == max(table(v))))
numeric("2")
numeric("3")
integer("3")
integer("4")
which(table(v) == max(table(v)))
which(table(v) == max(table(v)))[1,]
which(table(v) == max(table(v)))[,2]
which(table(v) == max(table(v)))
as.data.frame(which(table(v) == max(table(v))))
as.data.frame(which(table(v) == max(table(v))))[,1]
as.data.frame(which(table(v) == max(table(v))))[,2]
as.data.frame(which(table(v) == max(table(v))))[1,]
as.data.frame(which(table(v) == max(table(v))))[5,]
which(table(v) == max(table(v)))
sapply(names(which(table(v) == max(table(v)))), function(x) x[1,])
names(which(table(v) == max(table(v))))
k <- names(which(table(v) == max(table(v))))
as(k, "integer")
stat_mode <- function(x){
k <- names(which(table(x) == max(table(x))))
return(as(k, "integer"))
}
stat_mode <- function(x){
k <- names(which(table(x) == max(table(x))))
return(as(k, "integer"))
}
v <- c(1, 2, 3, 3, 3, 4, 5)
stat_mode(v)
v <- c(1, 1, 1, 2, 3, 3, 3)
stat_mode(v)
?chisq.test
###############################################
# Categorical data
df <- read.csv("grants.csv")
str(df)  # структура данных
df$status <- as.factor(df$status)  # 1 способ представить данные в типе "фактор"
levels(df$status) <- c("Not funded", "Funded")  # позволяет увидеть уровни фактора
df$status <- factor(df$status, labels = c("Not funded", "Funded"))  # 2 способ сделать факторную переменную
# мы можем построить таблицу по данным
t1 <- table(df$status)  # позволяет посмотреть, сколько наблюдений было в том или ином классе
t1
dim(t1)  # показывает размерность таблицы
# 2d table
t2 <- table(df$status, df$field)  # таблица сопряженности по двум переменным
t2
t2 <- table(status=df$status, field=df$field) # подпишем строки и столбцы, присвоим переменным имена
t2
dim(t2)  # двумерная таблица
prop.table(t2)  # дает пропорции, проценты. В сумме будет 1. Не удобное представление
prop.table(t2, 1)  # суммы в строчках будут = 100%. Не удобное представление
prop.table(t2, 2)  # суммы в столбцах будут = 100%. Удобное представление
t3 <- table(Years=df$years_in_uni, Field=df$field, Status=df$status)  # создадим трехмерную таблицу
# таблица разбилась на 2: неподдержанные заявки, поддержанные заявки
dim(t3)  # трехмерная таблица
# _______________________________________________________________________
# графики. barplot - столбчатая диаграмма
t2
barplot(t1)  # столбчатая диаграмма, одномерная таблица
barplot(t2)  # столбчатая диаграмма, двумерная таблица
barplot(t2, legend.text = T, args.legend = list(x = 'topright'))  # столбчатая диаграмма с легеендой
barplot(t2, legend.text = T, args.legend = list(x = 'topright'), beside = T)  # столбчатая диаграмма с легендой и с разделением столбцов
mosaicplot(t2)  # мозаичный график
###############################################
# Binomial Test
binom.test(x = 5, n = 20, p = 0.5)  # есть монетка, мы подкидываем ее 20 раз, выпадает 5 орлов и 15 решек
binom.test(t1)
###############################################
# Chi-Square
t1
chisq.test(t1)
chi <- chisq.test(t1)
chi$exp  # ожидаемые значения
chi$obs  # наблюдаемые значения
t2  # таблица сопряженностей полученных-неполученных заявок по областям знаний
chisq.test(t2)
###############################################
# Fisher's Exact Test
fisher.test(t2)
df <- read.csv("grants.csv")
str(df)  # структура данных
df$status <- as.factor(df$status)  # 1 способ представить данные в типе "фактор"
levels(df$status) <- c("Not funded", "Funded")  # позволяет увидеть уровни фактора
df$status <- factor(df$status, labels = c("Not funded", "Funded"))  # 2 способ сделать факторную переменную
# мы можем построить таблицу по данным
t1 <- table(df$status)  # позволяет посмотреть, сколько наблюдений было в том или ином классе
t1
# мы можем построить таблицу по данным
t1 <- table(df$status)  # позволяет посмотреть, сколько наблюдений было в том или ином классе
df <- read.csv("grants.csv")
setwd("~/R/Projects/Анализ данных в R/2 Статистика в R часть 1")
###############################################
# Categorical data
df <- read.csv("grants.csv")
str(df)  # структура данных
df$status <- as.factor(df$status)  # 1 способ представить данные в типе "фактор"
levels(df$status) <- c("Not funded", "Funded")  # позволяет увидеть уровни фактора
df$status <- factor(df$status, labels = c("Not funded", "Funded"))  # 2 способ сделать факторную переменную
# мы можем построить таблицу по данным
t1 <- table(df$status)  # позволяет посмотреть, сколько наблюдений было в том или ином классе
t1
dim(t1)  # показывает размерность таблицы
# 2d table
t2 <- table(df$status, df$field)  # таблица сопряженности по двум переменным
t2
t2 <- table(status=df$status, field=df$field) # подпишем строки и столбцы, присвоим переменным имена
t2
dim(t2)  # двумерная таблица
prop.table(t2)  # дает пропорции, проценты. В сумме будет 1. Не удобное представление
prop.table(t2, 1)  # суммы в строчках будут = 100%. Не удобное представление
prop.table(t2, 2)  # суммы в столбцах будут = 100%. Удобное представление
t3 <- table(Years=df$years_in_uni, Field=df$field, Status=df$status)  # создадим трехмерную таблицу
# таблица разбилась на 2: неподдержанные заявки, поддержанные заявки
dim(t3)  # трехмерная таблица
# _______________________________________________________________________
# графики. barplot - столбчатая диаграмма
t2
barplot(t1)  # столбчатая диаграмма, одномерная таблица
barplot(t2)  # столбчатая диаграмма, двумерная таблица
barplot(t2, legend.text = T, args.legend = list(x = 'topright'))  # столбчатая диаграмма с легеендой
barplot(t2, legend.text = T, args.legend = list(x = 'topright'), beside = T)  # столбчатая диаграмма с легендой и с разделением столбцов
mosaicplot(t2)  # мозаичный график
###############################################
# Binomial Test
binom.test(x = 5, n = 20, p = 0.5)  # есть монетка, мы подкидываем ее 20 раз, выпадает 5 орлов и 15 решек
binom.test(t1)
###############################################
# Chi-Square
t1
chisq.test(t1)
chi <- chisq.test(t1)
chi$exp  # ожидаемые значения
chi$obs  # наблюдаемые значения
t2  # таблица сопряженностей полученных-неполученных заявок по областям знаний
chisq.test(t2)
###############################################
# Fisher's Exact Test
fisher.test(t2)
chisq.test(t2)
chisq.test(t1)
# Chi-Square
t1
chisq.test(t1)
barplot(t1)  # столбчатая диаграмма, одномерная таблица
chisq.test(t1)
chisq.test(t1)
chi <- chisq.test(t1)
chi$exp  # ожидаемые значения
chi$obs  # наблюдаемые значения
chisq.test(t2)
fisher.test(t2)
?chisq.test
chisq.test(t1)$stdres
chisq.test(t1)
t1
test_data <- read.csv("https://stepic.org/media/attachments/course/524/test_drugs.csv")
str(test_data)
table(test_data)
chisq.test(test_data)
tab <- table(test_data)
chisq.test(tab)
chisq.test(tab)
table(test_data)
chisq.test(tab)$stdres
which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres))
names(which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres)))
which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres))
str(test_data)
test_data <- read.csv("https://stepic.org/media/attachments/course/524/test_drugs.csv", stringsAsFactors = T)
str(test_data)
tab <- table(test_data)
table(test_data)
chisq.test(tab)
which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres))
tab <- table(test_data)
which(tab == max((tab)))
tab
which(tab == max(tab), useNames = T)
which(tab == max(tab), arr.ind = T)
chisq.test(tab)$stdres
which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T)
colnames(which(tab == max(tab), arr.ind = T))
rownames(which(tab == max(tab), arr.ind = T))
which(tab == max(tab), arr.ind = T)
which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T)
colnames(which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T))
rownames(which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T))
chisq.test(tab)$stdres
which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T)
chisq.test(tab)$stdres
chisq.test(tab)$stdres
colnames(which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T))
rownames(which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T))
which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T)
which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T)[1]
which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T)[2]
which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T)[1,2]
which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T)[1][2]
which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T)[2]
tab[which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T)[2]]
tab <- table(test_data)
tab
which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T)[1]
chisq.test(tab)$stdres
row.names(chisq.test(tab)$stdres[1])
rownames(chisq.test(tab)$stdres[1])
chisq.test(tab)$stdres
which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T)[1]
which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T)[2]
chisq.test(tab)$stdres[1]
chisq.test(tab)$stdres
chisq.test(tab)$stdres[1]
chisq.test(tab)$stdres[1,]
chisq.test(tab)$stdres[,2]
chisq.test(tab)$stdres
chisq.test(tab)$stdres[1,2]
rownames(chisq.test(tab)$stdres[1,2])
col(which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T))
colnames(which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T))
rownames(which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T))
chisq.test(tab)$stdres
which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T)
rownames(test_data)
rownames(chisq.test(tab))
rownames(tab)
colnames(tab)
rownames(tab)[1]
colnames(tab)[2]
which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T)[1]
which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T)[2]
rownames(tab)[which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T)[1]]
colnames(tab)[which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T)[2]]
test_data <- read.csv("https://stepic.org/media/attachments/course/524/test_drugs.csv", stringsAsFactors = T)
tab <- table(test_data)
rownames(tab)[which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T)[1]]
colnames(tab)[which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T)[2]]
colnames(which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T))
str(test_data)
tab <- table(test_data)
chisq.test(tab)
which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T)[1]
which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T)[2]
rownames(chisq.test(tab)$stdres[1,2])
chisq.test(tab)$stdres[,2]
rownames(tab)[which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T)[1]]
colnames(tab)[which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T)[2]]
colnames(which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T))
rownames(which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T))
colnames(which(chisq.test(tab)$stdres == max(chisq.test(tab)$stdres), arr.ind = T))
library(ggplot2)
str(diamonds)
df <- diamonds
library(ggplot2)
df <- diamonds
View(df)
table(diamonds$color)
y <- table(diamonds$color)
yy <- table(diamonds$color)
obj <- ggplot(diamonds, aes(x = color, y = yy, col=cut)) +
barplot()
View(df)
obj <- ggplot(diamonds, aes(x = color, y = yy, col=factor(cut))) +
barplot()
obj <- ggplot(diamonds, aes(x = color, y = yy, col=factor(cut))) +
barplot(height = 1)
ggplot(diamonds, aes(x = color, y = yy, col=factor(cut))) +
barplot(height = 1)
obj <- ggplot(diamonds, aes(x = color, y = yy, col=factor(cut))) +
geom_bar()
obj <- ggplot(diamonds, aes(x = color, y = yy, col=factor(cut))) +
geom_bar()
obj
yy <- table(diamonds$color)
table(diamonds$color)
diamonds$color
df$count <- table(diamonds$color)
table(diamonds$color)
ggplot(diamonds, aes(x = color, y = yy, col=factor(cut))) +
geom_bar(stat="identity")
table(diamonds$color)[1]
df$count <- 1
df
View(df)
obj <- ggplot(diamonds, aes(x = color, y = count, col=factor(cut))) +
geom_bar(stat="identity")
ggplot(diamonds, aes(x = color, y = count, col=factor(cut))) +
geom_bar(stat="identity")
df <- diamonds
str(diamonds)
df$count <- 1
ggplot(df, aes(x = color, y = count, col=factor(cut))) +
geom_bar(stat="identity")
obj <- ggplot(df, aes(x = color, y = count, col=factor(cut))) +
geom_bar(stat="identity")
obj
ggplot(df, aes(x = color, y = count, col=factor(cut))) +
geom_bar()
ggplot(df, aes(x = color, y = count, col=factor(cut))) +
geom_bar(stat="identity")
ggplot(df, aes(x = color, y = count, fill=factor(cut))) +
geom_bar(stat="identity")
ggplot(df, aes(x = color, y = count, fill=factor(cut))) +
geom_bar(position="dodge", stat="identity")
ggplot(df, aes(x = color, y = count, fill=factor(cut))) +
geom_bar(stat="identity")
?geom_bar
ggplot(df, aes(x = color, y = count, fill=factor(cut)), position = "stack") +
geom_bar(stat="identity")
?geom_bar
library(ggplot2)
# create a dataset
specie <- c(rep("sorgho" , 3) , rep("poacee" , 3) , rep("banana" , 3) , rep("triticum" , 3) )
condition <- rep(c("normal" , "stress" , "Nitrogen") , 4)
value <- abs(rnorm(12 , 0 , 15))
data <- data.frame(specie,condition,value)
# Grouped
ggplot(data, aes(fill=condition, y=value, x=specie)) +
geom_bar(position="dodge", stat="identity")
ggplot(df, aes(x = color, y = count, fill=cut), position = "stack") +
geom_bar(stat="identity")
ggplot(df, aes(x = color, y = count, fill=cut), position = "stack") +
geom_bar(position="dodge", stat="identity")
ggplot(df, aes(x = color, y = count, fill=cut)) +
geom_bar(position="dodge", stat="identity")
obj <- ggplot(df, aes(x = color, y = count, fill=cut)) +
geom_bar(position="dodge", stat="identity")
obj
table(diamonds$color)
ggplot(df, aes(x = color, y = table(diamonds$color), fill=cut)) +
geom_bar(position="dodge", stat="identity")
table(diamonds$color)[1,]
table(diamonds$color)[,1]
table(diamonds$color)
table(diamonds$color)[0]
table(diamonds$color)[1]
table(diamonds$color)[2]
table(diamonds$color)[1,]
obj <- ggplot(df, aes(x = color, fill=cut)) +
geom_bar(position="dodge", stat="identity")
obj
ggplot(df, aes(x = color, fill=cut)) +
geom_bar(position="dodge", stat="identity")
View(df)
ggplot(df, aes(x = factor(color), fill=cut)) +
geom_bar(position="dodge", stat="identity")
ggplot(df, aes(x = factor(color), fill=cut)) +
geom_bar(position="dodge", stat="bin")
ggplot(mtcars, aes(x=factor(cyl)))+
geom_bar(stat="bin", width=0.7, fill="steelblue")+
theme_minimal()
library(ggplot2)
ggplot(mtcars, aes(x=factor(cyl)))+
geom_bar(stat="bin", width=0.7, fill="steelblue")+
theme_minimal()
