mean_hp <- aggregate(x = df$hp, by = list(df$vs), FUN = mean)  # лошадинные силы разбились на 2 группы (v, и s двигатели)
mean_hp_vs <- aggregate(x = df$hp, by = list(df$vs), FUN = mean)  # лошадинные силы разбились на 2 группы (v, и s двигатели)
View(mean_hp_vs)
# Изменим названия колонок на понятные
colnames(mean_hp_vs)
# Изменим названия колонок на понятные
colnames(mean_hp_vs) <- c("VS", "Mean hp")
df <- mtcars
df$vs <- factor(df$vs , labels = c("V", "S"))  # labels - названия уровней фактора
df$am <- factor(df$am , labels = c("Automatic", "Manual"))  # автоматическая или ручная коробка передач
# Изменим названия колонок на понятные
colnames(mean_hp_vs) <- c("VS", "Mean hp")
mean_hp_vs <- aggregate(x = df$hp, by = list(df$vs), FUN = mean)  # лошадинные силы разбились на 2 группы (v, и s двигатели)
# Изменим названия колонок на понятные
colnames(mean_hp_vs) <- c("VS", "Mean hp")
View(mean_hp_vs)
aggregate(hp ~ vs, df, mean)  # разбиваем переменную hp по переменной vs
aggregate(hp ~ vs + am, df, mean)  # разбиваем переменную hp по 2 переменным: по типу двигателя и по типу коробки передач
# Запишем то же самое в более формальном виде:
aggregate(x = df$hp, by = list(df$vs, df$am), FUN = mean)
# Мы можем исследовать несколько количественных переменных с разбиением их на группы:
aggregate(x = df[,-c(8,9)], by = list(df$am), FUN = median)  # Указываем все строки, все столбцы кроме 8, 9 (они не количественные)
?mtcars
aggregate(df[,c(1,3)], by=list(df$am, df$vs), FUN = sd)
View(df)
aggregate(cbind(mpg, disp) ~ am + vs, df, sd)
cbind(mpg, disp)
cbind(df$mpg, df$disp)
df <- mtcars
df <- mtcars
descriptions_stat <- aggregate(cbind(hp, disp) ~ am, df, sd)
View(descriptions_stat)
View(df)
descriptions_stat <- aggregate(df[,c(3, 4)], by = list(df$am), FUN = sd) # 2 решение
View(descriptions_stat)
descriptions_stat <- aggregate(cbind(hp, disp) ~ am, df, sd) # 1 решение
View(descriptions_stat)
descriptions_stat <- aggregate(df[,c(3, 4)], by = list(df$am), FUN = sd) # 2 решение
View(descriptions_stat)
descriptions_stat <- aggregate(cbind(hp, disp) ~ am, df, sd) # 1 решение
View(descriptions_stat)
descriptions_stat <- aggregate(cbind(disp, hp) ~ am, df, sd) # 1 решение
View(descriptions_stat)
descriptions_stat <- aggregate(df[,c(3, 4)], by = list(df$am), FUN = sd) # 2 решение
View(descriptions_stat)
descriptions_stat <- aggregate(c(disp, hp) ~ am, df, sd)
descriptions_stat <- aggregate(x = df[,c(3, 4)], by = list(df$am), FUN = sd) # 3 решение
View(descriptions_stat)
df <- mtcars
df <- mtcars
# сделаем, чтобы номинативные переменные были факторами
# (тип двигателя: v-образный или s-образный)
df$vs <- factor(df$vs , labels = c("V", "S"))  # labels - названия уровней фактора
df$am <- factor(df$am , labels = c("Automatic", "Manual"))  # автоматическая или ручная коробка передач
library(ggplot2)
ggplot(df, aes(x = mpg))  # в aes отображается, какие перменные будут отображены на графике и каким образом
ggplot(df, aes(x = mpg)) + # в aes отображается, какие перменные будут отображены на графике и каким образом
geom_histogram() # указываем слой (что будет отображаться на графике)
ggplot(df, aes(x = mpg)) + # в aes отображается, какие перменные будут отображены на графике и каким образом
geom_histogram() # указываем слой (что будет отображаться на графике)
ggplot(df, aes(x = mpg)) + # в aes отображается, какие перменные будут отображены на графике и каким образом
geom_histogram()
ggplot(df, aes(x = mpg)) + # в aes отображается, какие перменные будут отображены на графике и каким образом
geom_histogram(fill = "white", col = "black") # указываем слой (что будет отображаться на графике)
ggplot(df, aes(x = mpg)) + # в aes отображается, какие перменные будут отображены на графике и каким образом
geom_histogram(fill = "white", col = "black", binwidth = 2) # указываем слой (что будет отображаться на графике)
ggplot(df, aes(x = mpg)) + # построим dotplot
geom_dotplot()
ggplot(df, aes(x = mpg)) + # построим функцию плотности
geom_density()
ggplot(df, aes(x = mpg)) + # построим функцию плотности
geom_density(fill = "red")
ggplot(df, aes(x = mpg)) + # построим dotplot
geom_dotplot()
ggplot(df, aes(x = mpg, fill = am)) + # построим dotplot
geom_dotplot()
ggplot(df, aes(x = mpg)) + # построим функцию плотности
geom_density(fill = "red")
ggplot(df, aes(x = mpg, fill = am)) + # построим функцию плотности
geom_density(fill = "red")
ggplot(df, aes(x = mpg, fill = am)) + # построим функцию плотности
geom_density()
ggplot(df, aes(x = mpg, fill = am)) + # построим функцию плотности в зависимости от типа коробки передач
geom_density()
ggplot(df, aes(x = mpg, fill = am)) + # построим функцию плотности в зависимости от типа коробки передач
geom_density(alpha = 0.2)
ggplot(df, aes(x = mpg, fill = am)) + # построим функцию плотности в зависимости от типа коробки передач
geom_density(alpha = 0.02)  # alpha определяет прозрачность
ggplot(df, aes(x = mpg, fill = am)) + # построим функцию плотности в зависимости от типа коробки передач
geom_density(alpha = 0.2)  # alpha определяет прозрачность
ggplot(df, aes(x = mpg, fill = am)) + # построим dotplot. Заполним кружочки в зависимости от типа коробки передач
geom_dotplot()
df <- mtcars
library(ggplot2)
ggplot(df, aes(x = am, y = hp))+
geom_point()
ggplot(df, aes(x = am, y = hp))+
geom_boxplot()
df <- mtcars
ggplot(df, aes(x = am, y = hp))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = am, y = hp, col = vs))+
geom_boxplot(aes(group=am))
# сделаем, чтобы номинативные переменные были факторами
# (тип двигателя: v-образный или s-образный)
df$vs <- factor(df$vs , labels = c("V", "S"))  # labels - названия уровней фактора
df$am <- factor(df$am , labels = c("Automatic", "Manual"))  # автоматическая или ручная коробка передач
ggplot(df, aes(x = am, y = hp, col = vs))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = am, y = hp, fill = vs))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = am, y = hp))+
geom_boxplot(aes(group=am, fill = vs))
ggplot(df, aes(x = am, y = hp))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = am, y = hp, col=vs))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = am, y = hp, col=factor(vs)))+
geom_boxplot(aes(group=am))
df <- mtcars
# сделаем, чтобы номинативные переменные были факторами
# (тип двигателя: v-образный или s-образный)
df$vs <- factor(df$vs , labels = c("V", "S"))  # labels - названия уровней фактора
df$am <- factor(df$am , labels = c("Automatic", "Manual"))  # автоматическая или ручная коробка передач
library(ggplot2)
ggplot(df, aes(x = am, y = hp, col=vs))+
geom_boxplot(aes(group=am))
View(df)
ggplot(df, aes(x = am, y = hp, fill=vs))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = am, y = hp, col==vs))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = am, y = hp, col=vs))+
geom_boxplot(aes(group=am))
?col
ggplot(df, aes(x = mpg, y = hp))+
geom_point()
ggplot(df, aes(x = mpg, y = hp))+
geom_point(sizr = 6)  # увеличим размер точек
ggplot(df, aes(x = mpg, y = hp))+
geom_point(size = 6)  # увеличим размер точек
ggplot(df, aes(x = mpg, y = hp, col=vs))+
geom_point(size = 6)  # увеличим размер точек
ggplot(df, aes(x = am, y = hp), col=vs)+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = am, y = hp, col=vs))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = mpg, y = hp, col=vs))+
geom_point(size = 6)  # увеличим размер точек
ggplot(df, aes(x = am, y = hp, col=vs))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = am, y = hp, color=vs))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = mpg, y = hp, col=vs))+
geom_point(size = 6)  # увеличим размер точек
ggplot(df, aes(x = mpg, y = hp, color=vs))+
geom_point(size = 6)  # увеличим размер точек
df <- mtcars
# сделаем, чтобы номинативные переменные были факторами
# (тип двигателя: v-образный или s-образный)
df$vs <- factor(df$vs , labels = c("V", "S"))  # labels - названия уровней фактора
df$am <- factor(df$am , labels = c("Automatic", "Manual"))  # автоматическая или ручная коробка передач
library(ggplot2)
ggplot(df, aes(x = am, y = hp, color=vs))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = mpg, y = hp, color=vs))+
geom_point(size = 6)  # увеличим размер точек
ggplot(df, aes(x = am, y = hp, col=vs))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = am, y = hp, col=vs))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = mpg, y = hp, col=vs, size = qsec))+
geom_point()
# В отличие от базовой графики мы можем сохранять резулльтаты построения графиков в одну перемнную
my_plot <- ggplot(df, aes(x = mpg, y = hp, col=vs, size = qsec))+  # теперь размер точек зависит от времени разгона
geom_point()
ggplot(df, aes(x = am, y = hp, col=vs))+
geom_boxplot(aes(group=am))
my_plot
my_plot2 + geom_boxplot()
my_plot2 <- ggplot(df, aes(x = mpg, y = hp, col=vs))  # можем сделать заготовку
my_plot2 + geom_boxplot()
ggplot(df, aes(x = am, y = hp, col=vs))+
geom_boxplot(aes(group=am))
my_plot2 <- ggplot(df, aes(x = am, y = hp, col=vs))  # можем сделать заготовку
my_plot2 + geom_boxplot()
ggplot(df, aes(x = am, y = hp, col=vs))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = am, y = hp, col=vs))+
geom_boxplot()
ggplot(df, aes(x = am, y = hp))+
geom_boxplot(aes(group=am))
ggplot(df, aes(x = am, y = hp))+
geom_boxplot()
ggplot(df, aes(x = am, y = hp))+
geom_boxplot()
my_plot2 + geom_boxplot()
df <- airquality
View(df)
library(ggplot2)
ggplot(df)
ggplot(df)+geom_boxplot()
ggplot(df, aes(x = Month, y = Ozone))+geom_boxplot()
ggplot(df, aes(x = Month[Month==9], y = Ozone))+geom_boxplot()
df[Month==9]
df
subset(df, Month==9)
ggplot(df, aes(x = subset(df, Month==9), y = Ozone))+geom_boxplot()
ggplot(subset(df, Month==9), aes(x = Month, y = Ozone))+geom_boxplot()
ggplot(subset(df, Month==9), aes(x = Month, y = Ozone))+geom_boxplot()
df$Month <- factor(df$Month)  # автоматическая или ручная коробка передач
ggplot(subset(df, Month==9), aes(x = Month, y = Ozone))+geom_boxplot()
library(ggplot2)
df <- airquality
ggplot(subset(df, Month==9), aes(x = Month, y = Ozone))+geom_boxplot()
df$Month <- factor(df$Month)  # Обратите внимание, что для корректного отображения графика ggplot ожидает факторную переменную по оси x.
ggplot(subset(df, Month==9), aes(x = Month, y = Ozone))+geom_boxplot()
ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity")
# Чтобы построить столбчатую диаграмму в ggplot, вам нужно подключить нужный пакет,
# затем преобразовать таблицу HairEyeColor в data frame
library(ggplot2)
mydata <- as.data.frame(HairEyeColor[, , "Female"])
ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity")
ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
obj
obj <- ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
obj
mydata <- as.data.frame(HairEyeColor)
obj <- ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
obj
View(mydata)
ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity", position = "stack") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
obj <- ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity", position = "top") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
obj <- ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity", position = "Top") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
obj <- ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity", position = "Topright") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
mydata <- as.data.frame(HairEyeColor)
HairEyeColor
subset(mydata, Sex = 'Female')
mydata2 <- subset(mydata, Sex = 'Female')
obj <- ggplot(data = mydata2, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity", position = "Topright") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
View(mydata2)
View(mydata)
mydata2 <- subset(as.data.frame(HairEyeColor), Sex = 'Female')
mydata2 <- subset(as.data.frame(HairEyeColor), Sex == 'Female')
mydata <- subset(as.data.frame(HairEyeColor), Sex == 'Female')
ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity", position = "Topright") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity", position = "stack") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
ggplot(data = mydata, aes(x = Hair, y = Freq)) +
geom_bar(stat="identity", position = "stack") +
scale_fill_manual(values=c("Brown", "Blue", "Hazel", "Green"))
ggplot(data = mydata, aes(x = Hair, y = Freq, fill = "Eye")) +
geom_bar(stat="identity", position = "stack") +
scale_fill_manual(values=c("Brown", "Blue", "Hazel", "Green"))
ggplot(data = mydata, aes(x = Hair, y = Freq, fill = "Eye")) +
geom_bar(stat="identity", position = "stack") +
scale_fill_manual(values=c("Brown", "Blue", "Hazel", "Green"))
ggplot(data = mydata, aes(x = Hair, y = Freq, fill = "Eye")) +
geom_bar(stat="identity", position = "stack") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
obj <- ggplot(data = mydata, aes(x = Hair, y = Freq, fill = "Eye")) +
geom_bar(stat="identity", position = "stack") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
obj
str(mydata)
str(mydata$Eye)
ggplot(data = mydata, aes(x = Hair, y = Freq, fill = Eye)) +
geom_bar(stat="identity", position = "stack") +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
ggplot(data = mydata, aes(x = Hair, y = Freq, fill = Eye)) +
geom_bar(stat="identity", position = "stack", beside=T) +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
ggplot(data = mydata, aes(x = Hair, y = Freq, fill = Eye)) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
# Чтобы построить столбчатую диаграмму в ggplot, вам нужно подключить нужный пакет,
# затем преобразовать таблицу HairEyeColor в data frame
library(ggplot2)
mydata <- subset(as.data.frame(HairEyeColor), Sex == 'Female')
obj <- ggplot(data = mydata, aes(x = Hair, y = Freq, fill = Eye)) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
# Чтобы построить столбчатую диаграмму в ggplot, вам нужно подключить нужный пакет,
# затем преобразовать таблицу HairEyeColor в data frame
library(ggplot2)
mydata <- subset(as.data.frame(HairEyeColor), Sex == 'Female')
obj <- ggplot(data = mydata, aes(x = Hair, y = Freq, fill = Eye)) +
geom_bar(stat="identity", position=position_dodge()) +
scale_fill_manual(values=c("Brown", "Blue", "Darkgrey", "Darkgreen"))
library(ggplot2)
diamonds$price
is.vector(diamonds$price)
mean(diamonds$price)
diamonds$price >= mean(diamonds$price)
diamonds$price < mean(diamonds$price)
if_more_than_mean <- diamonds$price >= mean(diamonds$price)
diamonds$price <- factor(if_more_than_mean, labels = c(0, 1))
diamonds$price
diamonds
diamonds$price <- factor(if_more_than_mean, labels = c(0, 1))
factor(if_more_than_mean, labels = c(0, 1))
library(ggplot2)
diamonds$price
diamonds$factor_price <- factor(diamonds$price >= mean(diamonds$price), labels = c(0, 1))
diamonds$factor_price
library(ggplot2)
diamonds$factor_price <- factor(diamonds$price >= mean(diamonds$price), labels = c(0, 1))
diamonds$factor_carat <- factor(diamonds$carat >= mean(diamonds$carat), labels = c(0, 1))
diamonds
chisq.test(diamonds$factor_price, diamonds$factor_carat)
library(ggplot2)
diamonds$factor_price <- factor(diamonds$price >= mean(diamonds$price), labels = c(0, 1))
diamonds$factor_carat <- factor(diamonds$carat >= mean(diamonds$carat), labels = c(0, 1))
main_stat <- chisq.test(diamonds$factor_price, diamonds$factor_carat)$statistic
mtcars
mtcars$am
mtcars$vs
library(ggplot2)
diamonds$cut
diamonds$color
fisher.test(mtcars$am, mtcars$vs)
?fisher.test()
fisher.test(mtcars$am, mtcars$vs)[1]
fisher_test <- fisher.test(mtcars$am, mtcars$vs)$p.value
fisher_test
?iris
df <- iris
df <- iris
View(df)
str(df)
View(df)
df1 <- subset(df, Species != "setosa")
str(df1)
table(df1$Species)
hist(df1$Sepal.Length)
library(ggplot2)
ggplot(df1, aes(df1$Sepal.Length))+
geom_histogram()
ggplot(df1, aes(df1$Sepal.Length))+
geom_histogram(fill = "white", col = "black")
ggplot(df1, aes(Sepal.Length))+
geom_histogram(fill = "white", col = "black")
hist(df1$Sepal.Length)  # распределение довольно симметричное
ggplot(df1, aes(Sepal.Length))+
geom_histogram(fill = "white", col = "black")
ggplot(df1, aes(Sepal.Length))+
geom_histogram(fill = "white", col = "black", binwidth = 0.4)
ggplot(df1, aes(x = Sepal.Length))+
geom_histogram(fill = "white", col = "black", binwidth = 0.4)
View(df1)
ggplot(df1, aes(x = Sepal.Length))+
geom_histogram(fill = "white", col = "black", binwidth = 0.4)+
facet_grid(Species ~ .)  # позволяет добавить некоторую переменную, которая разобьет наблюдение на группы
ggplot(df1, aes(Sepal.Length, col = Species))+
geom_density()  # график, который рисует функцию плотности
ggplot(df1, aes(Sepal.Length, fill = Species))+
geom_density()  # график, который рисует функцию плотности
ggplot(df1, aes(Sepal.Length, fill = Species))+
geom_density(alpha = 0.5)  # график, который рисует функцию плотности
ggplot(df1, aes(Sepal.Length, fill = Species))+
geom_density(alpha = 0.5)  # график, который рисует функцию плотности (alpha - уровень прозрачности)
ggplot(df1, aes(Species, Sepal.Length))+  # полезно посмотреть, есть ли выбросы в наших группах
geom_boxplot()
shapiro.test(x = df1$Sepal.Length)  # в качестве аргумента принимается вектор значений
View(df1)
shapiro.test(df1$Sepal.Length[df1$Species == "versicolor"])
shapiro.test(df1$Sepal.Length[df1$Species == "virginica"])
bartlett.test(Sepal.Length ~ Species, df1)
bartlett.test(Species ~ Sepal.Length, df1)  # получим результат, сравнение дисперсий в двух группах
bartlett.test(Sepal.Length ~ Species, df1)  # получим результат, сравнение дисперсий в двух группах
library(ggplot2)
library(ggplot2)
?formula
x ~ 2*3
x
2*3
x ~ 2*3
patients <- rbind(c(18, 7), c(6, 13))
chisq.test(patients)
test <- as.data.frame(patients)
View(test)
setwd("~/R/Projects/Анализ данных в R/1 Предобработка данных")
mydata <- read.csv('evals.csv', stringsAsFactors=TRUE)
mydata
View(mydata)  # просмотр
summary(mydata)  # основные статистические показатели по кажд. переменной
a <- names(mydata)  # названия колонок (переменных) - вектор значений. Доступны операции с векторами
test <- as.data.frame(patients, row.names = c("Placebo", "Aspirine"))
test
#  анализ остатков
?as.data.frame
test <- as.data.frame(patients, row.names = c("Placebo", "Aspirine"), col.names = c("
thrombosis", "no thrombosis"))
test
test <- as.data.frame(patients, row.names = c("Placebo", "Aspirine"), col.names = c("
thrombosis", "no thrombosis"))
test
test <- as.data.frame(patients, row.names = c("Placebo", "Aspirine"), col.names = c("thrombosis", "no thrombosis"))
test
patients <- rbind(c(18, 7), c(6, 13))
#подпишем строки и столбцы
colnames(patients) <- c("Yes", "No")
rownames(patients) <- c("Placebo", "Aspirin")
#вот график, который нам нужен
mosaicplot(patients, color=T, shade=T, ylab="Thrombosis", xlab="Group")
#а вот так можно в точности воспроизвести рисунок, который мы видели
mosaicplot(patients, color=T, shade=T, ylab="Thrombosis", xlab="Group", cex.axis=1, main="")
#  анализ остатков
#воссоздадим таблицу
patients <- rbind(c(18, 7), c(6, 13))
#подпишем строки и столбцы
colnames(patients) <- c("Yes", "No")
rownames(patients) <- c("Placebo", "Aspirin")
#вот график, который нам нужен
mosaicplot(patients, color=T, shade=T, ylab="Thrombosis", xlab="Group")
#а вот так можно в точности воспроизвести рисунок, который мы видели
mosaicplot(patients, color=T, shade=T, ylab="Thrombosis", xlab="Group", cex.axis=1, main="")
#воссоздадим таблицу
patients2 <- rbind(c(25, 1), c(3, 30))
#подпишем строки и столбцы
colnames(patients2) <- c("Yes", "No")
rownames(patients2) <- c("Placebo", "Aspirin")
#вот наш график
mosaicplot(patients2, color=T, shade=T, ylab="Thrombosis", xlab="Group", cex.axis=1, ma
#вот наш график
mosaicplot(patients2, color=T, shade=T, ylab="Thrombosis", xlab="Group", cex.axis=1, main="")
#воссоздадим таблицу
patients2 <- rbind(c(25, 1), c(3, 30))
#подпишем строки и столбцы
colnames(patients2) <- c("Yes", "No")
rownames(patients2) <- c("Placebo", "Aspirin")
#вот наш график
mosaicplot(patients2, color=T, shade=T, ylab="Thrombosis", xlab="Group", cex.axis=1, main="")
#  анализ остатков
#воссоздадим таблицу
patients <- rbind(c(18, 7), c(6, 13))
#подпишем строки и столбцы
colnames(patients) <- c("Yes", "No")
rownames(patients) <- c("Placebo", "Aspirin")
#вот график, который нам нужен
mosaicplot(patients, color=T, shade=T, ylab="Thrombosis", xlab="Group")
#а вот так можно в точности воспроизвести рисунок, который мы видели
mosaicplot(patients, color=T, shade=T, ylab="Thrombosis", xlab="Group", cex.axis=1, main="")
#воссоздадим таблицу
patients2 <- rbind(c(25, 1), c(3, 30))
#подпишем строки и столбцы
colnames(patients2) <- c("Yes", "No")
rownames(patients2) <- c("Placebo", "Aspirin")
#вот наш график
mosaicplot(patients2, color=T, shade=T, ylab="Thrombosis", xlab="Group", cex.axis=1, main="")
test$observed
patients2$observed
#  анализ остатков
#воссоздадим таблицу
patients <- rbind(c(18, 7), c(6, 13))
#подпишем строки и столбцы
colnames(patients) <- c("Yes", "No")
rownames(patients) <- c("Placebo", "Aspirin")
#вот график, который нам нужен
mosaicplot(patients, color=T, shade=T, ylab="Thrombosis", xlab="Group")
#а вот так можно в точности воспроизвести рисунок, который мы видели
mosaicplot(patients, color=T, shade=T, ylab="Thrombosis", xlab="Group", cex.axis=1, main="")
#  анализ остатков
#воссоздадим таблицу
patients <- rbind(c(18, 7), c(6, 13))
#подпишем строки и столбцы
colnames(patients) <- c("Yes", "No")
rownames(patients) <- c("Placebo", "Aspirin")
#вот график, который нам нужен
mosaicplot(patients, color=T, shade=T, ylab="Thrombosis", xlab="Group")
#  Чтобы просмотреть остатки в R:
O <- matrix(c(18, 7, 6, 13), ncol = 2, nrow = 2, byrow = T)
print(chisq.test(O)$residuals)
matrix(c(18, 7, 6, 13), ncol = 2, nrow = 2, byrow = T)
#  картинка в R
#воссоздадим таблицу
dtp <- rbind(c(10, 40), c(35, 15))
#подпишем строки и столбцы
colnames(dtp) <- c("Был в ДТП", "Не был в ДТП")
rownames(dtp) <- c("Проходит курсы", "Не проходит курсы")
#вот наш график
mosaicplot(dtp, color=T, shade=T, xlab="ДТП", ylab="Group", cex.axis=1, main="")
test <- chisq.test(dtp)
test$observed # observed counts (same as M) (наблюдаемые значения)
test$expected # expected counts under the null (ожидаемые значения)
