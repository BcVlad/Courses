fit <- aggregate(test_data[, 1] ~ test_data[, 2] + test_data[, 3], test_data, function(x) shapiro.test(x)$p.value)
df <- data.frame(Xity = fit[1], City = fit[2], Citty = fit[3])
return(df)
}
normality_by(test_data)
normality_by <- function(test_data){
fit <- aggregate(test_data[, 1] ~ test_data[, 2] + test_data[, 3], test_data, function(x) shapiro.test(x)$p.value)
df <- data.frame(Xity = fit[1], City = fit[2], Citty = fit[3])
return(str(fit))
}
normality_by(test_data)
normality_by <- function(test_data){
fit <- aggregate(test_data[, 1] ~ test_data[, 2] + test_data[, 3], test_data, function(x) shapiro.test(x)$p.value)
#df <- data.frame(Xity = fit[1], City = fit[2], Citty = fit[3])
colnames(fit) <- c(names(test_data)[2], names(test_data)[3], "p_value")
return(str(fit))
}
normality_by(test_data)
normality_by <- function(test_data){
fit <- aggregate(test_data[, 1] ~ test_data[, 2] + test_data[, 3], test_data, function(x) shapiro.test(x)$p.value)
#df <- data.frame(Xity = fit[1], City = fit[2], Citty = fit[3])
colnames(fit) <- c(names(test_data)[2], names(test_data)[3], "p_value")
return(fit)
}
normality_by(test_data)
normality_by(mtcars[, c("mpg", "am", "vs")])
library(ggplot2)
library(ggrepel) # для симпатичной подписи точек на графике
x <- rnorm(10)
y <- rnorm(10)
test_data <- data.frame(x, y)
test_data$labels <- 1:10
ggplot(test_data, aes(x, y, label = labels))+
geom_point()+
geom_text_repel()
d = dist(test_data)
fit <- hclust(d, method = "single")
plot(fit, labels = test_data$labels)
rect.hclust(fit, 2) # укажите желаемое число кластеров, сейчас стоит 2
library(ggplot2)
library(ggrepel) # для симпатичной подписи точек на графике
x <- runif(10, 1.0,10.0) #заменил rnorm, чтобы график с одинаковыми масштабами
y <- runif(10, 1.0,10.0) #осей x и у смотрелся получше
test_data <- data.frame(x, y)
rownames(test_data) <- LETTERS[1:10] #если запихнуть в названия строк наши условные названия точек, то они передадутся в лэйблы dist, а оттуда в hclust и в plot
ggplot(test_data, aes(x, y, label = rownames(test_data)))+
geom_point()+
geom_text_repel()+
scale_x_continuous(breaks = 1:10)+ #для одинакового шага осей
scale_y_continuous(breaks = 1:10)
d = dist(test_data)
fit <- hclust(d, method = "single")
plot(fit) #возьмет лэйблы из первоисточника
rect.hclust(fit, 2) # укажите желаемое число кластеров, сейчас стоит 2
install.packages("ape")
library(ape)
set.seed(222)
tr <- rtree(20, tip.label = c("B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U"))
#левое дерево
plot.phylo(tr)
#правое дерево
plot.phylo(tr, use.edge.length=FALSE)
library(ape)
set.seed(222)
tr <- rtree(20, tip.label = c("B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U"))
#левое дерево
plot.phylo(tr)
#правое дерево
plot.phylo(tr, use.edge.length=FALSE)
data(swiss)
fit <- prcomp(swiss, center = T)
plot(fit, type = "l")
summary(fit)
biplot(fit)
# А можно то же сделать с использованием библиотеки ggbiplot:
install.packages("devtools")
library(devtools)
install_github("ggbiplot", "vqv")
library(ggbiplot)
install_github("ggbiplot", "vqv")
dt <- swiss
dt$is_catholic <- ifelse(swiss$Catholic > 50, 1, 0)
dt$is_catholic <- factor(dt$is_catholic)
fit <- prcomp(swiss, center = T)
g <- ggbiplot(fit, obs.scale = 1, var.scale = 1,
group = dt$is_catholic,
ellipse = TRUE,
circle = TRUE)
install.packages("openxlsx")
install.packages("reshape2")
install.packages("plyr")
install.packages("scales")
library(openxlsx)
library(reshape2)
library(plyr)
library(scales)
library(ggplot2)
library(devtools)
library(grid)
install_github("vqv/ggbiplot")
install_github("vqv/ggbiplot")
install_github("vqv/ggbiplot", force = TRUE)
library(ggbiplot)
library(devtools)
install_github("vqv/ggbiplot")
install.packages("remotes")
install.packages("remotes")
remotes::install_github("vqv/ggbiplot")
library(usethis)
library(devtools)
install_github("vqv/ggbiplot")
library(ggbiplot)
biplot(mtcars.pca)
library(devtools)
options(download.file.method = "wininet")
install_github("vqv/ggbiplot", force = TRUE)
setwd("~/R/Projects/Основы статистики. Часть 2/3 Кластерный анализ и метод главных компонент")
#
#  ggbiplot.r
#
#  Copyright 2011 Vincent Q. Vu.
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
#' Biplot for Principal Components using ggplot2
#'
#' @param pcobj           an object returned by prcomp() or princomp()
#' @param choices         which PCs to plot
#' @param scale           covariance biplot (scale = 1), form biplot (scale = 0). When scale = 1, the inner product between the variables approximates the covariance and the distance between the points approximates the Mahalanobis distance.
#' @param obs.scale       scale factor to apply to observations
#' @param var.scale       scale factor to apply to variables
#' @param pc.biplot       for compatibility with biplot.princomp()
#' @param groups          optional factor variable indicating the groups that the observations belong to. If provided the points will be colored according to groups
#' @param ellipse         draw a normal data ellipse for each group?
#' @param ellipse.prob    size of the ellipse in Normal probability
#' @param labels          optional vector of labels for the observations
#' @param labels.size     size of the text used for the labels
#' @param alpha           alpha transparency value for the points (0 = transparent, 1 = opaque)
#' @param circle          draw a correlation circle? (only applies when prcomp was called with scale = TRUE and when var.scale = 1)
#' @param var.axes        draw arrows for the variables?
#' @param varname.size    size of the text for variable names
#' @param varname.adjust  adjustment factor the placement of the variable names, >= 1 means farther from the arrow
#' @param varname.abbrev  whether or not to abbreviate the variable names
#'
#' @return                a ggplot2 plot
#' @export
#' @examples
#'   data(wine)
#'   wine.pca <- prcomp(wine, scale. = TRUE)
#'   print(ggbiplot(wine.pca, obs.scale = 1, var.scale = 1, groups = wine.class, ellipse = TRUE, circle = TRUE))
#'
ggbiplot <- function(pcobj, choices = 1:2, scale = 1, pc.biplot = TRUE,
obs.scale = 1 - scale, var.scale = scale,
groups = NULL, ellipse = FALSE, ellipse.prob = 0.68,
labels = NULL, labels.size = 3, alpha = 1,
var.axes = TRUE,
circle = FALSE, circle.prob = 0.69,
varname.size = 3, varname.adjust = 1.5,
varname.abbrev = FALSE, ...)
{
library(ggplot2)
library(plyr)
library(scales)
library(grid)
stopifnot(length(choices) == 2)
# Recover the SVD
if(inherits(pcobj, 'prcomp')){
nobs.factor <- sqrt(nrow(pcobj$x) - 1)
d <- pcobj$sdev
u <- sweep(pcobj$x, 2, 1 / (d * nobs.factor), FUN = '*')
v <- pcobj$rotation
} else if(inherits(pcobj, 'princomp')) {
nobs.factor <- sqrt(pcobj$n.obs)
d <- pcobj$sdev
u <- sweep(pcobj$scores, 2, 1 / (d * nobs.factor), FUN = '*')
v <- pcobj$loadings
} else if(inherits(pcobj, 'PCA')) {
nobs.factor <- sqrt(nrow(pcobj$call$X))
d <- unlist(sqrt(pcobj$eig)[1])
u <- sweep(pcobj$ind$coord, 2, 1 / (d * nobs.factor), FUN = '*')
v <- sweep(pcobj$var$coord,2,sqrt(pcobj$eig[1:ncol(pcobj$var$coord),1]),FUN="/")
} else if(inherits(pcobj, "lda")) {
nobs.factor <- sqrt(pcobj$N)
d <- pcobj$svd
u <- predict(pcobj)$x/nobs.factor
v <- pcobj$scaling
d.total <- sum(d^2)
} else {
stop('Expected a object of class prcomp, princomp, PCA, or lda')
}
# Scores
choices <- pmin(choices, ncol(u))
df.u <- as.data.frame(sweep(u[,choices], 2, d[choices]^obs.scale, FUN='*'))
# Directions
v <- sweep(v, 2, d^var.scale, FUN='*')
df.v <- as.data.frame(v[, choices])
names(df.u) <- c('xvar', 'yvar')
names(df.v) <- names(df.u)
if(pc.biplot) {
df.u <- df.u * nobs.factor
}
# Scale the radius of the correlation circle so that it corresponds to
# a data ellipse for the standardized PC scores
r <- sqrt(qchisq(circle.prob, df = 2)) * prod(colMeans(df.u^2))^(1/4)
# Scale directions
v.scale <- rowSums(v^2)
df.v <- r * df.v / sqrt(max(v.scale))
# Change the labels for the axes
if(obs.scale == 0) {
u.axis.labs <- paste('standardized PC', choices, sep='')
} else {
u.axis.labs <- paste('PC', choices, sep='')
}
# Append the proportion of explained variance to the axis labels
u.axis.labs <- paste(u.axis.labs,
sprintf('(%0.1f%% explained var.)',
100 * pcobj$sdev[choices]^2/sum(pcobj$sdev^2)))
# Score Labels
if(!is.null(labels)) {
df.u$labels <- labels
}
# Grouping variable
if(!is.null(groups)) {
df.u$groups <- groups
}
# Variable Names
if(varname.abbrev) {
df.v$varname <- abbreviate(rownames(v))
} else {
df.v$varname <- rownames(v)
}
# Variables for text label placement
df.v$angle <- with(df.v, (180/pi) * atan(yvar / xvar))
df.v$hjust = with(df.v, (1 - varname.adjust * sign(xvar)) / 2)
# Base plot
g <- ggplot(data = df.u, aes(x = xvar, y = yvar)) +
xlab(u.axis.labs[1]) + ylab(u.axis.labs[2]) + coord_equal()
if(var.axes) {
# Draw circle
if(circle)
{
theta <- c(seq(-pi, pi, length = 50), seq(pi, -pi, length = 50))
circle <- data.frame(xvar = r * cos(theta), yvar = r * sin(theta))
g <- g + geom_path(data = circle, color = muted('white'),
size = 1/2, alpha = 1/3)
}
# Draw directions
g <- g +
geom_segment(data = df.v,
aes(x = 0, y = 0, xend = xvar, yend = yvar),
arrow = arrow(length = unit(1/2, 'picas')),
color = muted('red'))
}
# Draw either labels or points
if(!is.null(df.u$labels)) {
if(!is.null(df.u$groups)) {
g <- g + geom_text(aes(label = labels, color = groups),
size = labels.size)
} else {
g <- g + geom_text(aes(label = labels), size = labels.size)
}
} else {
if(!is.null(df.u$groups)) {
g <- g + geom_point(aes(color = groups), alpha = alpha)
} else {
g <- g + geom_point(alpha = alpha)
}
}
# Overlay a concentration ellipse if there are groups
if(!is.null(df.u$groups) && ellipse) {
theta <- c(seq(-pi, pi, length = 50), seq(pi, -pi, length = 50))
circle <- cbind(cos(theta), sin(theta))
ell <- ddply(df.u, 'groups', function(x) {
if(nrow(x) <= 2) {
return(NULL)
}
sigma <- var(cbind(x$xvar, x$yvar))
mu <- c(mean(x$xvar), mean(x$yvar))
ed <- sqrt(qchisq(ellipse.prob, df = 2))
data.frame(sweep(circle %*% chol(sigma) * ed, 2, mu, FUN = '+'),
groups = x$groups[1])
})
names(ell)[1:2] <- c('xvar', 'yvar')
g <- g + geom_path(data = ell, aes(color = groups, group = groups))
}
# Label the variable axes
if(var.axes) {
g <- g +
geom_text(data = df.v,
aes(label = varname, x = xvar, y = yvar,
angle = angle, hjust = hjust),
color = 'darkred', size = varname.size)
}
# Change the name of the legend for groups
# if(!is.null(groups)) {
#   g <- g + scale_color_brewer(name = deparse(substitute(groups)),
#                               palette = 'Dark2')
# }
# TODO: Add a second set of axes
return(g)
}
#
#  ggscreeplot.r
#
#  Copyright 2011 Vincent Q. Vu.
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
#' Screeplot for Principal Components
#'
#' @param pcobj          an object returned by prcomp() or princomp()
#' @param type           the type of scree plot.  'pev' corresponds proportion of explained variance, i.e. the eigenvalues divided by the trace. 'cev' corresponds to the cumulative proportion of explained variance, i.e. the partial sum of the first k eigenvalues divided by the trace.
#' @export
#' @examples
#'   data(wine)
#'   wine.pca <- prcomp(wine, scale. = TRUE)
#'   print(ggscreeplot(wine.pca))
#'
ggscreeplot <- function(pcobj, type = c('pev', 'cev'))
{
type <- match.arg(type)
d <- pcobj$sdev^2
yvar <- switch(type,
pev = d / sum(d),
cev = cumsum(d) / sum(d))
yvar.lab <- switch(type,
pev = 'proportion of explained variance',
cev = 'cumulative proportion of explained variance')
df <- data.frame(PC = 1:length(d), yvar = yvar)
ggplot(data = df, aes(x = PC, y = yvar)) +
xlab('principal component number') + ylab(yvar.lab) +
geom_point() + geom_path()
}
library(ggbiplot)
source("path to /ggbiplot-master/R/ggbiplot.r")
setwd("~/R/Projects/Основы статистики. Часть 2/3 Кластерный анализ и метод главных компонент")
source("C:\Users\vladm\Documents\R\Projects\Основы статистики. Часть 2\3 Кластерный анализ и метод главных компонент\ggbiplot-master\R\ggbiplot.r")
source("C:/Users/vladm/Documents/R/Projects/Основы статистики. Часть 2/3 Кластерный анализ и метод главных компонент/ggbiplot-master/R/ggscreeplot.r")
source("C:/Users/vladm/Documents/R/Projects/Основы статистики. Часть 2/3 Кластерный анализ и метод главных компонент/ggbiplot-master/R/ggbiplot.r")
source("C:/Users/vladm/Documents/R/Projects/Основы статистики. Часть 2/3 Кластерный анализ и метод главных компонент/ggbiplot-master/R/ggscreeplot.r")
library(ggbiplot)
source('https://raw.githubusercontent.com/vqv/ggbiplot/master/R/ggbiplot.r')
source('https://raw.githubusercontent.com/vqv/ggbiplot/master/R/ggbiplot.r')
source('https://raw.githubusercontent.com/vqv/ggbiplot/master/R/ggscreeplot.r')
source('https://raw.githubusercontent.com/vqv/ggbiplot/master/R/ggscreeplot.r')
pca_object <- prcomp(iris[,-5], center = T, scale. = T)
ggbiplot(pca_object)
ggscreeplot(pca_object)
ggbiplot(pca_object)
library(ggbiplot)
install.packages("devtools")
library(devtools)
install_github("ggbiplot", "vqv")
library(ggbiplot)
dt <- swiss
dt$is_catholic <- ifelse(swiss$Catholic > 50, 1, 0)
dt$is_catholic <- factor(dt$is_catholic)
fit <- prcomp(swiss, center = T)
g <- ggbiplot(fit, obs.scale = 1, var.scale = 1,
group = dt$is_catholic,
ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
install.packages("devtools")
library(ggbiplot)
# А можно то же сделать с использованием библиотеки ggbiplot:
library(devtools)
library(ggbiplot)
dt <- swiss
dt$is_catholic <- ifelse(swiss$Catholic > 50, 1, 0)
dt$is_catholic <- factor(dt$is_catholic)
fit <- prcomp(swiss, center = T)
dt <- swiss
dt$is_catholic <- ifelse(swiss$Catholic > 50, 1, 0)
dt$is_catholic <- factor(dt$is_catholic)
fit <- prcomp(swiss, center = T)
g <- ggbiplot(fit, obs.scale = 1, var.scale = 1,
group = dt$is_catholic,
ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
source('https://raw.githubusercontent.com/vqv/ggbiplot/master/R/ggbiplot.r')
source('https://raw.githubusercontent.com/vqv/ggbiplot/master/R/ggscreeplot.r')
pca_object <- prcomp(iris[,-5], center = T, scale. = T)
ggbiplot(pca_object)
ggscreeplot(pca_object)
print(g)
g <- ggbiplot(fit, obs.scale = 1, var.scale = 1,
group = dt$is_catholic,
ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
install.packages("pca3d")
library(pca3d)
dt <- swiss
dt$is_catholic <- ifelse(swiss$Catholic > 50, 1, 0)
dt$is_catholic <- factor(dt$is_catholic)
fit <- prcomp(swiss, center = T)
pca3d(fit, group = dt$is_catholic,
fancy = T,
new=T)
pca3d(fit, group = dt$is_catholic,
fancy = T,
new=T)
library(NbClust)
library("cluster")
library(factoextra)
dist(swiss)
hclust(dist(swiss))
hclust(dist(swiss))
fit <- hclust(dist(swiss))
cutree(fit, 3)
str(cutree(fit, 3))
cutree(fit, 3)[1]
cutree(fit, 3)[2]
cutree(fit, 3)
cutree(fit, 2)
cutree(fit, 3)
unlist(cutree(fit, 3))
str(unlist(cutree(fit, 3)))
str(cutree(fit, 3))
unlist(cutree(fit, 3))
str(cutree(fit, 3))$Named int
unlist(cutree(fit, 3))["Named int"]
unlist(cutree(fit, 3))["Named"]
unlist(cutree(fit, 3))[0]
unlist(cutree(fit, 3))[1]
unlist(cutree(fit, 3))[2]
as.matrix(cutree(fit, 3))
as.matrix(cutree(fit, 3))[1]
as.matrix(cutree(fit, 3))[, 1]
as.vector(cutree(fit, 3))
smart_hclust<-  function(test_data, cluster_number){
dist_matrix <- dist(test_data)
fit <- hclust(dist_matrix)
cluster <- cutree(fit, cluster_number)
test_data$cluster <- as.vector(cluster)
return(test_data)
}
test_data <- read.csv("https://stepic.org/media/attachments/course/524/test_data_hclust.csv")
smart_hclust<-  function(test_data, cluster_number){
dist_matrix <- dist(test_data)
fit <- hclust(dist_matrix)
cluster <- cutree(fit, cluster_number)
test_data$cluster <- as.vector(cluster)
print(str(test_data))
return(test_data)
}
test_data <- read.csv("https://stepic.org/media/attachments/course/524/test_data_hclust.csv")
smart_hclust(test_data, 3)
smart_hclust<-  function(test_data, cluster_number){
dist_matrix <- dist(test_data)
fit <- hclust(dist_matrix)
cluster <- cutree(fit, cluster_number)
test_data$cluster <- as.vector(cluster)
test_data$cluster <- as.factor(test_data$cluster)
return(test_data)
}
smart_hclust<-  function(test_data, cluster_number){
dist_matrix <- dist(test_data)
fit <- hclust(dist_matrix)
cluster <- cutree(fit, cluster_number)
test_data$cluster <- as.vector(cluster)
test_data$cluster <- as.factor(test_data$cluster)
print(str(test_data))
return(test_data)
}
smart_hclust(test_data, 3)
smart_hclust<-  function(test_data, cluster_number){
dist_matrix <- dist(test_data)
fit <- hclust(dist_matrix)
cluster <- cutree(fit, cluster_number)
test_data$cluster <- as.factor(as.vector(cluster))
#test_data$cluster <- as.factor(test_data$cluster)
print(str(test_data))
return(test_data)
}
test_data <- read.csv("https://stepic.org/media/attachments/course/524/test_data_hclust.csv")
smart_hclust(test_data, 3)
