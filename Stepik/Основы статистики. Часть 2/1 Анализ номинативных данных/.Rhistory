}
}
NA.position2 <- function(x){
for (i in 1:length(x)){
if (is.na(x[i])){
print(i)
}
}
}
NA.position1 <- function(x){
if (x[is.na(x)]){
return(x[is.na(x)])
}
else{
return(x)
}
}
my_vector <- c(1, 2, 3, NA, NA)
NA.position1(my_vector)
which(is.na(x))
NA.position1 <- function(x){
which(is.na(x))
}
NA.position2 <- function(x){
for (i in 1:length(x)){
if (is.na(x[i])){
print(i)
}
}
}
my_vector <- c(1, 2, 3, NA, NA)
NA.position1(my_vector)
NA.position2(my_vector)
print(i, end=' ')
my_vector <- c(1, 2, 3, NA, NA)
NA.counter <- function(x){
sum(x[is.na(x)])
}
NA.counter(my_vector)
my_vector <- c(1, 2, 3, NA, NA)
NA.counter <- function(x){
sum(x[is.na(x)])
}
NA.counter(my_vector)
is.na(my_vector)
sum(is.na(x))
NA.counter <- function(x){
sum(is.na(x))
}
NA.counter(my_vector)
NA.counter <- function(x){
return(sum(is.na(x)))
}
NA.counter(my_vector)
mydata <- mtcars
View(mydata)
mtcars[,c("am", "vs")]
mtcars[, c("am", "vs")]
table(mtcars[, c("am", "vs")])
y[y<0]
y <- table(mtcars[, c("am", "vs")])
y[y<0]
y[y>0]
y[y<5]
y[y>5]
y <- table(mtcars[1:20, c("am", "vs")])
y
y[y<5]
length(y[y<5])
y <- table(mtcars[, c("am", "vs")])
length(y[y<5])
y <- table(mtcars[, c("am", "vs")])
smart_test(y)
smart_test <-  function(x){
if (length(x[x < 5]) == 0){
return(chisq.test(x))
}
else{
return(fisher.test(x)$p.value)
}
}
smart_test(y)
smart_test(y)[0]
smart_test(y)[1]
smart_test(y)[2]
smart_test(y)[3]
smart_test(y)
table(mtcars[, c("am", "vs")])
as.vector(chisq.test(table(mtcars[, c("am", "vs")])))
chisq.test(table(mtcars[, c("am", "vs")]))
chisq.test(table(mtcars[, c("am", "vs")]))$p.value
chisq.test(table(mtcars[, c("am", "vs")]))[p.value]
chisq.test(table(mtcars[, c("am", "vs")]))["p.value"]
str(chisq.test(table(mtcars[, c("am", "vs")])))
chisq.test(table(mtcars[, c("am", "vs")]))["statistic", "parameter", "p.value",]
chisq.test(table(mtcars[, c("am", "vs")]))["statistic", "parameter", "p.value"]
chisq.test(table(mtcars[, c("am", "vs")]))["statistic"]
chisq.test(table(mtcars[, c("am", "vs")]))["p.value"]
chisq.test(table(mtcars[, c("am", "vs")]))[c("statistic", "parameter", "p.value")]
table(mtcars[, c("am", "vs")])
chisq.test(table(mtcars[, c("am", "vs")]))[c("statistic", "parameter", "p.value")]
as.vector(chisq.test(table(mtcars[, c("am", "vs")]))[c("statistic", "parameter", "p.value")])
as.vector(chisq.test(table(mtcars[, c("am", "vs")]))[c("statistic", "parameter", "p.value")])
type(table(mtcars[, c("am", "vs")]))
typeof(table(mtcars[, c("am", "vs")]))
table(mtcars[, c("am", "vs")])
[chisq.test(y)$statistic, chisq.test(y)$parameter, chisq.test(y)$p.value]
c(chisq.test(y)$statistic, chisq.test(y)$parameter, chisq.test(y)$p.value)
c(chisq.test(y)$statistic[1], chisq.test(y)$parameter[1], chisq.test(y)$p.value)
c(chisq.test(y)$statistic[1], chisq.test(y)$parameter[1], chisq.test(y)$p.value[1])
a <- c(1)
b <- c(2)
c <- c(3)
a + b + c
c(1)+c(2)
str(table(mtcars[, c("am", "vs")]))
str(mtcars)
chisq.test(table(mtcars[, c("am", "vs")]))$statistic
chisq.test(table(mtcars[, c("am", "vs")]))$statistic[1]
chisq.test(table(mtcars[, c("am", "vs")]))$statistic
s <- c(chisq.test(table(mtcars[, c("am", "vs")]))$statistic)
s
s <- c(chisq.test(table(mtcars[, c("am", "vs")]))$statistic, chisq.test(table(mtcars[, c("am", "vs")]))$parameter)
s
s <- c(chisq.test(table(mtcars[, c("am", "vs")]))$statistic, chisq.test(table(mtcars[, c("am", "vs")]))$parameter,chisq.test(table(mtcars[, c("am", "vs")]))$p.value)
str(s)
s <- c(chisq.test(table(mtcars[, c("am", "vs")]))$statistic, chisq.test(table(mtcars[, c("am", "vs")]))$parameter,chisq.test(table(mtcars[, c("am", "vs")]))$p.value)
str(s)
s
class(c())
class(c(1, 2))
class(c(1, 2, 3))
class(s)
class(as.vector(c(1, 2, 3)))
y <- table(mtcars[, c("am", "vs")])
smart_test <-  function(x){
if (length(x[x < 5]) == 0){
return(as.vector(chisq.test(x)$statistic, chisq.test(x)$parameter, chisq.test(x)$p.value))
}
else{
return(fisher.test(x)$p.value)
}
}
smart_test(y)
smart_test <-  function(x){
if (length(x[x < 5]) == 0){
return(c(chisq.test(x)$statistic, chisq.test(x)$parameter, chisq.test(x)$p.value))
}
else{
return(fisher.test(x)$p.value)
}
}
smart_test(y)
y <- table(mtcars[1:20, c("am", "vs")])
smart_test(y)
test_data <- as.data.frame(list(am = c(1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1), vs = c(0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1)))
test_data <- as.data.frame(list(am = c(1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1), vs = c(0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1)))
smart_test <-  function(m){
x <- table(m)
if (length(x[x < 5]) == 0){
return(c(chisq.test(x)$statistic, chisq.test(x)$parameter, chisq.test(x)$p.value))
}
else{
return(fisher.test(x)$p.value)
}
}
smart_test(y)
test <- table(test_data)
table(test_data)
test_data <- as.data.frame(list(am = c(1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1), vs = c(0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1)))
smart_test <-  function(x){
if (length(x[x < 5]) == 0){
return(c(chisq.test(x)$statistic, chisq.test(x)$parameter, chisq.test(x)$p.value))
}
else{
return(fisher.test(x)$p.value)
}
}
smart_test(table(test_data))
test_data <- as.data.frame(list(am = c(1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1), vs = c(0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1)))
smart_test <-  function(x){
x <- table(x)
if (length(x[x < 5]) == 0){
return(c(chisq.test(x)$statistic, chisq.test(x)$parameter, chisq.test(x)$p.value))
}
else{
return(fisher.test(x)$p.value)
}
}
smart_test(test_data)
setwd("~/R/Projects/Основы статистики. Часть 2/1 Анализ номинативных данных")
test_data <- read.csv("https://stepic.org/media/attachments/course/524/test_data.csv", stringsAsFactors = F)
str(test_data)
table(test_data)
test_data <- read.csv("https://stepic.org/media/attachments/course/524/test_data.csv", stringsAsFactors = F)
View(test_data)
str(test_data)
?table
test_data <- read.csv("https://stepic.org/media/attachments/course/524/test_data.csv", stringsAsFactors = T)
str(test_data)
View(test_data)
table(test_data)
chisq.test(table(test_data))
test_data <- read.csv("https://stepic.org/media/attachments/course/524/test_data.csv", stringsAsFactors = T)
y <- table(test_data)
chisq.test(y)
test_data <- read.csv("https://stepic.org/media/attachments/course/524/test_data.csv", stringsAsFactors = T)
table(test_data)
View(test_data)
View(test_data)
install.packages("tibble")
test_data <- read.csv("https://stepic.org/media/attachments/course/524/test_data.csv", stringsAsFactors = T)
str(test_data$V1)
str(list(test_data$V1))
sapply(list(test_data$V1), function(x) chisq.test(x))
sapply(test_data$V1, function(x) chisq.test(x))
?count.fields
sapply(test_data$V1, function(x) chisq.test(x)$p.value)
sapply(test_data, function(x) chisq.test(x)$p.value)
sapply(test_data, function(x) chisq.test(table(x))$p.value)
sapply(test_data[,2], function(x) chisq.test(table(x))$p.value)
sapply(test_data[2,], function(x) chisq.test(table(x))$p.value)
sapply(test_data, function(x) chisq.test(table(x))$p.value)[2]
test_data <- read.csv("https://stepic.org/media/attachments/course/524/test_data.csv", stringsAsFactors = T)
most_significant <-  function(x){
return(which(sapply(test_data, function(x) chisq.test(table(x))$p.value) <= 0.05))
}
most_significant(test_data)
return(which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05))
most_significant <-  function(x){
return(which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05))
}
most_significant(test_data)
most_significant(test_data)
most_significant(test_data)
str(which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05))
which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05)[1]
which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05)[1][1]
which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05)[1,1]
which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05)$names
which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05)
str(which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05))
which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05)["names"]
colnames(which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05))
test_data <- read.csv("https://stepic.org/media/attachments/course/524/test_data.csv", stringsAsFactors = T)
colnames(which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05))
?colnames
colnames(test_data)
colnames(which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05))
which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05)
str(test_data)
str(which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05))
which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05)[1]
str(which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05)[1])
which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05)[1]$attr
which(sapply(colnames(test_data), function(x) chisq.test(table(x))$p.value) > 0.05)[1]$attr
colnames(which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05))
which(sapply(colnames(test_data), function(x) chisq.test(table(x))$p.value) > 0.05)
which(sapply(colnames(test_data), function(x) chisq.test(table(x))$p.value) > 0.05)
?which
which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05)
which(sapply(test_data, function(x) chisq.test(table(x))$p.value) < 0.05)
which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05, arr.ind = T)
which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05, arr.ind = F)
which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05, useNames = T)
which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05, useNames = F)
sapply(test_data, 2, function(x) chisq.test(table(x))$p.value)
test_data[1:3]
test_data[1:2]
which(sapply(test_data[1:3], 2, function(x) chisq.test(table(x))$p.value) > 0.05)
which(sapply(test_data[1:3], function(x) chisq.test(table(x))$p.value) > 0.05)
which(sapply(test_data[1:3], function(x) chisq.test(table(x))$p.value) > 0.05)$V1
colnames(test_data)
chisq.test(table(x))$p.value
chisq.test(table(test_data))$p.value
table(test_data)
test_data <- read.csv("https://stepic.org/media/attachments/course/524/test_data.csv", stringsAsFactors = T)
most_significant <-  function(x){
return(which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05))
}
most_significant(test_data)
which(sapply(test_data[1:3], function(x) chisq.test(table(x))$p.value) > 0.05)
which(sapply(test_data[1:3], function(x) chisq.test(table(x))$p.value) > 0.05)
as.vector(which(sapply(test_data[1:3], function(x) chisq.test(table(x))$p.value) > 0.05))
names(which(sapply(test_data[1:3], function(x) chisq.test(table(x))$p.value) > 0.05))
most_significant(test_data)
names(which(sapply(test_data[1:3], function(x) chisq.test(table(x))$p.value) > 0.05))
names(which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05))
most_significant <-  function(x){
return(names(which(sapply(test_data[1:3], function(x) chisq.test(table(x))$p.value) > 0.05)))
}
most_significant(test_data)
most_significant <-  function(x){
return(names(which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05)))
}
most_significant(test_data)
names(which(sapply(test_data, function(x) min(chisq.test(table(x))$p.value))))
test_data <- read.csv("https://stepic.org/media/attachments/course/524/test_data.csv", stringsAsFactors = T)
min(chisq.test(table(test_data))$p.value)
names(which(sapply(test_data, function(x) min(chisq.test(table(x))$p.value))))
names(sapply(test_data, function(x) min(chisq.test(table(x))$p.value)))
sapply(test_data, function(x) min(chisq.test(table(x))$p.value)
which(sapply(test_data, function(x) min(chisq.test(table(x))$p.value))
which(sapply(test_data, function(x) min(chisq.test(table(x))$p.value)
sapply(test_data, function(x) chisq.test(table(x))$p.value)
sapply(test_data, function(x) chisq.test(table(x))$p.value))
sapply(test_data, function(x) chisq.test(table(x))$p.value
sapply(test_data, function(x) chisq.test(table(x))$p.value)
sapply(test_data, function(x) chisq.test(table(x))$p.value
sapply(test_data, function(x) chisq.test(table(x))$p.value
sapply(test_data, function(x) chisq.test(table(x))
sapply(test_data, function(x) chisq.test(table(x))
sapply(test_data, function(x) chisq.test(table(x)))
sapply(test_data, function(x) chisq.test(table(x))$p.value)
min(sapply(test_data, function(x) chisq.test(table(x))$p.value))
return(names(which(min(sapply(test_data, function(x) chisq.test(table(x))$p.value)))))
most_significant <-  function(x){
return(names(which(min(sapply(test_data, function(x) chisq.test(table(x))$p.value)))))
}
test_data <- read.csv("https://stepic.org/media/attachments/course/524/test_data.csv", stringsAsFactors = T)
most_significant(test_data)
most_significant <-  function(x){
return(names(which(min(sapply(test_data, function(x) chisq.test(table(x))$p.value)))))
}
most_significant(test_data)
most_significant <-  function(x){
return(names(min(sapply(test_data, function(x) chisq.test(table(x))$p.value))))
}
most_significant(test_data)
min(sapply(test_data, function(x) chisq.test(table(x))$p.value))
sapply(test_data, function(x) chisq.test(table(x))$p.value)
which(min(sapply(test_data, function(x) chisq.test(table(x))$p.value)))
names(min(sapply(test_data, function(x) chisq.test(table(x))$p.value)))
names(sapply(test_data, function(x) chisq.test(table(x))$p.value))
min(names(sapply(test_data, function(x) chisq.test(table(x))$p.value)))
names(which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05))
most_significant <-  function(x){
return(names(which(sapply(test_data, function(x) chisq.test(table(x))$p.value) == min(chisq.test(table(x))$p.value))))
}
most_significant(test_data)
names(which(sapply(test_data, function(x) chisq.test(table(x))$p.value) == min(chisq.test(table(x))$p.value)))
names(which(sapply(test_data, function(x) chisq.test(table(x))$p.value) == min(sapply(test_data, function(x) chisq.test(table(x))$p.value)))
names(which(sapply(test_data, function(x) chisq.test(table(x))$p.value) == min(sapply(test_data, function(x) chisq.test(table(x))$p.value))))
min(sapply(test_data, function(x) chisq.test(table(x))$p.value)
min(sapply(test_data, function(x) chisq.test(table(x))$p.value)
min(sapply(test_data, function(x) chisq.test(table(x))$p.value))
names(which(sapply(test_data, function(x) chisq.test(table(x))$p.value) > 0.05))
names(which(sapply(test_data, function(x) chisq.test(table(x))$p.value) == min(sapply(test_data, function(x) chisq.test(table(x))$p.value))))
test_data <- read.csv("https://stepic.org/media/attachments/course/524/test_data.csv", stringsAsFactors = T)
most_significant <-  function(x){
return(names(which(sapply(test_data, function(x) chisq.test(table(x))$p.value) == min(sapply(test_data, function(x) chisq.test(table(x))$p.value)))))
}
most_significant(test_data)
?iris
iris
str(iris)
my_data <- iris
my_data <- iris
str(my_data)
my_data$important_cases <- ifelse(my_data$Sepal.Length > mean(my_data$Sepal.Length), "Yes", "No")
my_data
mean(my_data$Sepal.Length)
my_data <- iris
my_data <- iris
for (i in 1:nrow(mydata)){
counter <- 0
if (my_data$Sepal.Length[i] > mean(my_data$Sepal.Length)){
counter = counter + 1
}
if (my_data$Sepal.Width[i] > mean(my_data$Sepal.Width)){
counter = counter + 1
}
if (my_data$Petal.Length[i] > mean(my_data$Petal.Length)){
counter = counter + 1
}
if (my_data$Petal.Width[i] > mean(my_data$Petal.Width)){
counter = counter + 1
}
if (counter >= 3){
my_data$important_cases[i] <- "Yes"
} else {
my_data$important_cases[i] <- "No"
}
}
for (i in 1:nrow(my_data)){
counter <- 0
if (my_data$Sepal.Length[i] > mean(my_data$Sepal.Length)){
counter = counter + 1
}
if (my_data$Sepal.Width[i] > mean(my_data$Sepal.Width)){
counter = counter + 1
}
if (my_data$Petal.Length[i] > mean(my_data$Petal.Length)){
counter = counter + 1
}
if (my_data$Petal.Width[i] > mean(my_data$Petal.Width)){
counter = counter + 1
}
if (counter >= 3){
my_data$important_cases[i] <- "Yes"
} else {
my_data$important_cases[i] <- "No"
}
}
View(my_data)
table(my_data$important_cases)
str(my_data$important_cases)
my_data$important_cases <- factor(my_data$important_cases)
table(my_data$important_cases)
str(my_data$important_cases)
my_data <- iris
for (i in 1:nrow(my_data)){
counter <- 0
ifelse(my_data$Sepal.Length[i] > mean(my_data$Sepal.Length), counter = counter + 1, counter = counter + 0)
ifelse(my_data$Sepal.Width[i] > mean(my_data$Sepal.Width), counter = counter + 1, counter = counter + 0)
ifelse(my_data$Petal.Length[i] > mean(my_data$Petal.Length), counter = counter + 1, counter = counter + 0)
ifelse(my_data$Petal.Width[i] > mean(my_data$Petal.Width), counter = counter + 1, counter = counter + 0)
ifelse(counter >= 3, my_data$important_cases[i] <- "Yes", my_data$important_cases[i] <- "No")
}
for (i in 1:nrow(my_data)){
counter <- 0
ifelse(my_data$Sepal.Length[i] > mean(my_data$Sepal.Length), counter = counter + 1, counter = counter + 0)
ifelse(my_data$Sepal.Width[i] > mean(my_data$Sepal.Width), counter = counter + 1, counter = counter + 0)
ifelse(my_data$Petal.Length[i] > mean(my_data$Petal.Length), counter = counter + 1, counter = counter + 0)
ifelse(my_data$Petal.Width[i] > mean(my_data$Petal.Width), counter = counter + 1, counter = counter + 0)
ifelse(counter >= 3, my_data$important_cases[i] <- "Yes", my_data$important_cases[i] <- "No")
}
for (i in 1:nrow(iris)){
counter <- 0
if (iris$Sepal.Length[i] > mean(iris$Sepal.Length)){
counter = counter + 1
}
if (iris$Sepal.Width[i] > mean(iris$Sepal.Width)){
counter = counter + 1
}
if (iris$Petal.Length[i] > mean(iris$Petal.Length)){
counter = counter + 1
}
if (iris$Petal.Width[i] > mean(iris$Petal.Width)){
counter = counter + 1
}
if (counter >= 3){
iris$important_cases[i] <- "Yes"
} else {
iris$important_cases[i] <- "No"
}
}
iris$important_cases <- factor(iris$important_cases)
for (i in 1:nrow(iris)){
counter <- 0
if (iris$Sepal.Length[i] > mean(iris$Sepal.Length)){
counter = counter + 1
}
if (iris$Sepal.Width[i] > mean(iris$Sepal.Width)){
counter = counter + 1
}
if (iris$Petal.Length[i] > mean(iris$Petal.Length)){
counter = counter + 1
}
if (iris$Petal.Width[i] > mean(iris$Petal.Width)){
counter = counter + 1
}
if (counter >= 3){
iris$important_cases[i] <- "Yes"
} else {
iris$important_cases[i] <- "No"
}
}
iris$important_cases <- factor(iris$important_cases)
iris
for (i in 1:nrow(iris)){
counter <- 0
if (iris$Sepal.Length[i] > mean(iris$Sepal.Length)){
counter = counter + 1
}
if (iris$Sepal.Width[i] > mean(iris$Sepal.Width)){
counter = counter + 1
}
if (iris$Petal.Length[i] > mean(iris$Petal.Length)){
counter = counter + 1
}
if (iris$Petal.Width[i] > mean(iris$Petal.Width)){
counter = counter + 1
}
if (counter >= 3){
iris$important_cases[i] <- factor("Yes")
} else {
iris$important_cases[i] <- factor("No")
}
}
iris
for (i in 1:nrow(iris)){
counter <- 0
if (iris$Sepal.Length[i] > mean(iris$Sepal.Length)){
counter = counter + 1
}
if (iris$Sepal.Width[i] > mean(iris$Sepal.Width)){
counter = counter + 1
}
if (iris$Petal.Length[i] > mean(iris$Petal.Length)){
counter = counter + 1
}
if (iris$Petal.Width[i] > mean(iris$Petal.Width)){
counter = counter + 1
}
if (counter >= 3){
iris$important_cases[i] <- factor("Yes")
} else {
iris$important_cases[i] <- factor("No")
}
}
iris
