Sex = factor(Sex, labels = c("Female", "Male")))
# –†—ü–†—ï–°–É–°‚Äö–°–Ç–†—ï–†—ë–†—ò –†—ò–†—ï–†¬∑–†¬∞–†—ë–°‚Ä°–†–Ö–°‚Äπ–†‚Ññ –†—ñ–°–Ç–†¬∞–°‚Äû–†—ë–†—î
mosaic(~ Sex + Survived | Pclass, data=titanic)
# –†—ö–†—ï–†“ë–†¬µ–†¬ª–°–ä –†¬±–†¬µ–†¬∑ –†—ó–°–Ç–†¬µ–†“ë–†—ë–†—î–°‚Äö–†—ï–°–Ç–†—ï–†–Ü (Intercept only model)
simple_fit <- glm(Survived ~ 1, titanic, family = "binomial")
coef(simple_fit)
table(titanic$Survived)
coef(simple_fit)
simple_fit
odds <- 290 / 424  # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —à–∞–Ω—Å, —á—Ç–æ —Å–ª—É—á–∞–π–Ω–æ –≤–∑—è—Ç—ã–π –ø–∞—Å—Å–∞–∂–∏—Ä –≤—ã–∂–∏–≤–µ—Ç
odds
# —à–∞–Ω—Å –º–µ–Ω—å—à–µ 1, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å—Ö–æ–¥–∞ –º–µ–Ω—å—à–µ, —á–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ
log(odds)
exp(-0.3798525)
# –ú–æ–¥–µ–ª—å —Å –æ–¥–Ω–∏–º –Ω–æ–º–∏–Ω–∞—Ç–∏–≤–Ω—ã–º –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–æ–º
fit1 <- glm(Survived ~ Sex, titanic, family = "binomial")  # –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–∏–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞ –ø–æ–ª
fit1
coef(fit1)
table(titanic$Survived, titanic$Sex)
log(odds_female)  # —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –ª–æ–≥–∞—Ä–∏—Ñ–º —à–∞–Ω—Å–æ–≤ –¥–ª—è –∂–µ–Ω—â–∏–Ω
odds_male <- 93 / 360  # —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º —à–∞–Ω—Å –≤—ã–∂–∏—Ç—å –¥–ª—è –º—É–∂—á–∏–Ω < 1
odds_female <- 197 / 64  # —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º —à–∞–Ω—Å –≤—ã–∂–∏—Ç—å –¥–ª—è –∂–µ–Ω—â–∏–Ω > 1
log(odds_female)  # —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –ª–æ–≥–∞—Ä–∏—Ñ–º —à–∞–Ω—Å–æ–≤ –¥–ª—è –∂–µ–Ω—â–∏–Ω
log(odds_male)  # —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –ª–æ–≥–∞—Ä–∏—Ñ–º —à–∞–Ω—Å–æ–≤ –¥–ª—è –º—É–∂—á–∏–Ω
odds_ratio <- odds_male / odds_female
odds_male / odds_female
log(odds_ratio)
# –ú–æ–¥–µ–ª—å —Å –¥–≤—É–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞–º–∏
anova(simple_fit, fit1, test = "Chisq")  # –≤ –º–æ–¥–µ–ª–∏ simple_fit –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä—Å–µ–ø—Ç, –∞ –≤ fit1 –≤–∫–ª—é—á–µ–Ω –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä (–ø–æ–ª –ø–∞—Å—Å–∞–∂–∏—Ä–∞)
# –º—ã –º–æ–∂–µ–º —Å—Ä–∞–≤–Ω–∏—Ç—å –¥–≤–µ —ç—Ç–∏—Ö –º–æ–¥–µ–ª–∏ –º–µ–∂–¥—É —Å–æ–±–æ–π
anova(fit1, test = "Chisq")  # –º–æ–∂–Ω–æ –¥–∞–∂–µ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –º–æ–¥–µ–ª—å simple_fit
?swiss
swiss <- data.frame(swiss)
str(swiss)
swiss <- data.frame(swiss)
str(swiss)
hist(swiss$Fertility, col = 'red')
View(swiss)
fit <- lm(Fertility ~ Examination + Catholic, data=swiss)
summary(fit)
fit <- lm(Fertility ~ Examination + Catholic, data=swiss)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–∏–º–æ—Å—Ç—å –¥–≤—É—Ö–ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–æ–≤
fit
summary(fit)
fit <- lm(Fertility ~ Examination + Catholic, data=swiss)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–∏–º–æ—Å—Ç—å –¥–≤—É—Ö–ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–æ–≤
summary(fit)
fit2 <- lm(Fertility ~ Examination * Catholic, data=swiss)  # –∑–∞–¥–∞–¥–∏–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
summary(fit2)
confint(fit2)  #
?predict
test_data <- read.csv("https://stepic.org/media/attachments/course/129/fill_na_test.csv")
test_data <- read.csv("https://stepic.org/media/attachments/course/129/fill_na_test.csv")
str(test_data)
View(test_data)
fit <- lm(test_data[, 3] ~ test_data[, 1] + test_data[, 2], data = test_data)
summary(fit)
View(test_data)
View(fit)
predict(lm, x)
predict(fit, x)
predict(fit, test_data)
predict(fit, test_data)
test_data <- read.csv("https://stepic.org/media/attachments/course/129/fill_na_test.csv")
str(test_data)
fit <- lm(test_data[, 3] ~ test_data[, 1] + test_data[, 2], data = test_data)
summary(fit)
predict(fit, test_data)
fill_na <- function(x){
fit <- lm(x[, 3] ~ x[, 1] + x[, 2], data = x)
pr <- predict(fit, test_data)
x$y_full <- ifelse(is.na(x$y), x$y_full, x$y)
return(x)
}
fill_naˇ(test_data)
fill_na(test_data)
test_data <- read.csv("https://stepic.org/media/attachments/course/129/fill_na_test.csv")
fill_na(test_data)
fill_na <- function(x){
fit <- lm(x[, 3] ~ x[, 1] + x[, 2], data = x)
pr <- predict(fit, test_data)
x$y_full <- ifelse(is.na(x$y), x$y_full, x$y)
return(x)
}
fill_na(test_data)
predict(fit, test_data)
test_data$x$y_full <- ifelse(is.na(test_data$y), test_data$y_full, test_data$y)
test_data$y_full <- ifelse(is.na(test_data$y), test_data$y_full, test_data$y)
test_data <- read.csv("https://stepic.org/media/attachments/course/129/fill_na_test.csv")
str(test_data)
fit <- lm(test_data[, 3] ~ test_data[, 1] + test_data[, 2], data = test_data)
summary(fit)
predict(fit, test_data)
test_data$y_full <- predict(fit, test_data)
test_data$y_full <- ifelse(is.na(test_data$y), test_data$y_full, test_data$y)
fill_na <- function(x){
fit <- lm(x[, 3] ~ x[, 1] + x[, 2], data = x)
x <- predict(fit, test_data)
x$y_full <- ifelse(is.na(x$y), x$y_full, x$y)
return(x)
}
fill_na(test_data)
fill_na <- function(x){
fit <- lm(x[, 3] ~ x[, 1] + x[, 2], data = x)
x$y_full <- predict(fit, test_data)
x$y_full <- ifelse(is.na(x$y), x$y_full, x$y)
return(x)
}
fill_na(test_data)
mtcars
df <- mtcars[, c(1, 3, 4, 5, 5)]
df
df <- mtcars[, c(1, 3, 4, 5, 6)]
df
df <- mtcars[, c(1, 3:6)]
df
fit <- lm(wt ~ mpg + disp + drat + hp, data = df)
fit
df <- mtcars[, c(1, 3:6)]
fit <- lm(wt ~ mpg + disp + drat + hp, data = df)
df$pred <- predict(fit, df)
summary(fit)
View(df)
fit <- lm(wt ~ mpg + disp, data = df)
summary(fit)
+ drat + hp
fit <- lm(wt ~ mpg + disp + drat + hp, data = df)
summary(fit)
fit <- lm(wt ~ mpg + disp + drat, data = df)
summary(fit)
fit <- lm(wt ~ mpg + drat + hp, data = df)
summary(fit)
fit <- lm(wt ~ hp, data = df)
summary(fit)
fit <- lm(wt ~ mpg + disp + drat + hp, data = df)
summary(fit)
fit <- lm(wt ~ mpg + disp + drat + hp, data = df)
summary(fit)
fit <- lm(wt ~ mpg + drat, data = df)
summary(fit)
fit <- lm(wt ~ mpg, data = df)
summary(fit)
fit <- lm(wt ~ mpg + disp, data = df)
summary(fit)
fit <- lm(wt ~ mpg + disp + drat, data = df)
summary(fit)
fit <- lm(wt ~ mpg + disp + drat + hp, data = df)
summary(fit)
fit <- lm(wt ~ mpg + disp, data = df)
summary(fit)
fit <- lm(wt ~ disp, data = df)
summary(fit)
fit <- lm(wt ~ disp, data = df)
summary(fit)
fit <- lm(wt ~ mpg + disp, data = df)
summary(fit)
fit <- lm(wt ~ mpg + disp + drat, data = df)
summary(fit)
fit <- lm(wt ~ drat, data = df)
summary(fit)
fit <- lm(wt ~ mpg +dra, data = df)
fit <- lm(wt ~ mpg +drat, data = df)
summary(fit)
fit <- lm(wt ~ mpg + disp + drat, data = df)
summary(fit)
fit <- lm(wt ~ mpg + disp + drat + hp, data = df)
summary(fit)
fit <- lm(wt ~ hp, data = df)
summary(fit)
fit <- lm(wt ~ mpg + hp, data = df)
summary(fit)
fit <- lm(wt ~ mpg + disp + hp, data = df)
summary(fit)
fit <- lm(wt ~ mpg + disp + drat + hp, data = df)
summary(fit)
fit <- lm(wt ~ mpg + disp + hp, data = df)
summary(fit)
fit <- lm(wt ~ mpg + disp + drat + hp, data = df)
summary(fit)
fit <- lm(wt ~ mpg + disp + hp, data = df)
summary(fit)
install.packages("PerformanceAnalytics")
chart.Correlation(df)
library(PerformanceAnalytics)
chart.Correlation(df)
df <- mtcars[, c(1, 3:6)]
library(PerformanceAnalytics)
chart.Correlation(df)
df <- mtcars[, c(1, 3:6)]
attitude
df <- attitude
df <- attitude
fit <- lm(rating ~ complaints + critical, data = df)
summary(fit)
fit <- lm(rating ~ complaints * critical, data = df)
summary(fit)
hist(swiss$Catholic, col = 'red')
swiss$religious <- ifelse(swiss$Catholic > 60, 'Lots', 'Few')
swiss$religious <- as.factor(swiss$religious)
swiss
swiss$religious <- ifelse(swiss$Catholic > 60, 'Lots', 'Few') # –µ—Å–ª–∏ —á–∏—Å–ª–æ –∫–∞—Ç–æ–ª–∏–∫–æ–≤ > 60%, —Ç–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ Lots
swiss$religious <- as.factor(swiss$religious)
fit3 <- lm(Fertility ~ Examination + religious, data = swiss)
summary(fit3)
# —Å–æ–∑–¥–∞–¥–∏–º –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –≤–∫–ª—é—á–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Ç—Å–≤–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–¥–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –±—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω–æ–π)
fit4 <- lm(Fertility ~ Examination * religious, data = swiss)
summary(fit4)
# —Å–æ–∑–¥–∞–¥–∏–º –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –≤–∫–ª—é—á–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Ç—Å–≤–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–¥–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –±—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω–æ–π)
fit4 <- lm(Fertility ~ Examination * religious, data = swiss)
summary(fit4)
# –î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç—Ä–æ–∏–º –ø—Ä–æ—Å—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å—Å–µ–∏–≤–∞–Ω–∏—è.
library(ggplot2)
ggplot(swiss, aes(x = Examination, y = Fertility)) +
geom_point()
ggplot(swiss, aes(x = Examination, y = Fertility)) +
geom_point() +
geom_smooth(method = 'lm')
# –î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç—Ä–æ–∏–º –ø—Ä–æ—Å—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å—Å–µ–∏–≤–∞–Ω–∏—è.
library(ggplot2)
ggplot(swiss, aes(x = Examination, y = Fertility)) +
geom_point()
ggplot(swiss, aes(x = Examination, y = Fertility)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(swiss, aes(x = Examination, y = Fertility, col = religious)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(swiss, aes(x = Examination, y = Fertility, col = religious)) +
geom_point() +
geom_smooth()
ggplot(swiss, aes(x = Examination, y = Fertility, col = religious)) +
geom_point()
ggplot(swiss, aes(x = Examination, y = Fertility, col = religious)) +
geom_point()  # –≤–∏–¥–Ω–æ, —á—Ç–æ —Ç–æ—á–∫–∏ –≥—Ä—É–ø–ø–∏—Ä—É—é—Ç—Å—è –ø–æ –¥–≤—É–º —Ä–∞–∑–Ω—ã–º –≥—Ä—É–ø–ø–∞–º
ggplot(swiss, aes(x = Examination, y = Fertility, col = religious)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(swiss, aes(x = Examination, y = Fertility, col = religious)) +
geom_point() +
geom_smooth()
ggplot(swiss, aes(x = Examination, y = Fertility, col = religious)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(swiss, aes(x = Examination, y = Fertility, col = religious)) +
geom_point() +
geom_smooth(method = 'lm')
fit5 <- lm(Fertility ~ religious*Infant.Mortality*Examination, data = swiss)
summary(fit5)
mtcars$am <- factor(mtcars$am, labels = c('Automatic', 'Manual'))
mtcars$am <- factor(mtcars$am, labels = c('Automatic', 'Manual'))
mtcars
fit <- lm(mpg ~ wt*am, data = mtcars)
summary(fit)
mtcars
?mtcars
summary(fit)
summary(fit)
library(ggplot2)
mtcars$am <- factor(mtcars$am)
ggplot(mtcars, aes(x = wt, y = mpg, col = am)) +
geom_smooth(method = 'lm')
ggplot(mtcars, aes(x = wt, y = mpg, col = am)) +
geom_smooth(method = 'lm')
data(swiss)
data(swiss)
str(swiss)
data(swiss)
str(swiss)
# –ü–æ—Å–º–æ—Ç—Ä–∏–º –≤–∑–∞–∏–º–æ—Å–≤—è–∑—å –º–µ–∂–¥—É –≤—Å–µ–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
pairs(swiss)  # –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–∏–±–æ –¥–∞—Ç–∞—Å–µ—Ç, –ª–∏–±–æ –º–∞—Ç—Ä–∏—Ü—É —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
library(ggplot2)
library(ggplot2)
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
theme(axis.text = element_text(size=25),
axis.title = element_text(size = 25, face = "bold"))
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
theme(axis.text = element_text(size=25),
axis.title = element_text(size = 25, face = "bold")) +
geom_smooth(method = 'lm')
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
theme(axis.text = element_text(size=25),
axis.title = element_text(size = 25, face = "bold")) +
geom_smooth(method = 'lm')
ggplot(swiss, aes(x = Examination)) +
geom_histogram()
ggplot(swiss, aes(x = Education)) +
geom_histogram()
ggplot(swiss, aes(x = log(Education))) +
geom_histogram()
my_vector <- c(0.027, 0.079, 0.307, 0.098, 0.021, 0.091, 0.322, 0.211, 0.069, 0.261, 0.241, 0.166, 0.283, 0.041, 0.369, 0.167, 0.001, 0.053, 0.262, 0.033, 0.457, 0.166, 0.344, 0.139, 0.162, 0.152, 0.107, 0.255, 0.037, 0.005, 0.042, 0.220, 0.283, 0.050, 0.194, 0.018, 0.291, 0.037, 0.085, 0.004, 0.265, 0.218, 0.071, 0.213, 0.232, 0.024, 0.049, 0.431, 0.061, 0.523)
hist(my_vector)
hist(sqrt(my_vector))
hist(log(my_vector))
hist(1/my_vector)
hist(sqrt(my_vector))  # –¥–∞–Ω–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–µ–ª–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º
?scale
mtcars[, c(1)]
scale(mtcars[, c(1)])
hist(mtcars[, c(1)])
hist(scale(mtcars[, c(1)]))
lm(scale(mtcars[, c(1)]) ~ scale(mtcars[, c(2)], x = mtcars))
mtcars
lm(scale(mpg) ~ scale(cyl), data = mtcars)
summary(lm(scale(mpg) ~ scale(cyl), data = mtcars))
summary(lm(scale(mpg) ~ scale(cyl), data = mtcars))
mtcars
lm(scale(mpg) ~ scale(disp), data = mtcars)
summary(lm(scale(mpg) ~ scale(disp), data = mtcars))
?lm
lm(scale(mpg) ~ scale(disp), data = mtcars)$coefficients
lm(scale(mpg) ~ scale(disp), data = mtcars)$coefficients
swiss[,c(1,4)]
beta.coef <- function(x){
fit <- lm(scale(x[, 1]) ~ scale(x[, 2]), data = x)$coefficients
return(fit)
}
beta.coef(mtcars[,c(1,3)])
beta.coef(swiss[,c(1,4)])
shapiro.test(mtcars[, 1])
shapiro.test(mtcars[, 2])
shapiro.test(mtcars)
?shapiro.test
mtcars <- mtcars[,1:6]
sapply(mtcars, shapiro.test)
?shapiro.test
shapiro.test(mtcars[, 2])
sapply(mtcars, shapiro.test$p.value)
sapply(mtcars, shapiro.test)$p.value
sapply(mtcars, shapiro.test)
sapply(mtcars, shapiro.test()$p.value)
sapply(mtcars, shapiro.test$p.value)
sapply(mtcars, shapiro.test)
names(sapply(mtcars, shapiro.test))
str(sapply(mtcars, shapiro.test))
unlist(sapply(mtcars, shapiro.test))
str(unlist(sapply(mtcars, shapiro.test)))
str(sapply(mtcars, shapiro.test))
my_vector <- unlist(sapply(mtcars, shapiro.test))
my_vector
unlist(sapply(mtcars, shapiro.test))[1]
unlist(sapply(mtcars, shapiro.test))[1]
unlist(sapply(mtcars, shapiro.test))[2]
unlist(sapply(mtcars, shapiro.test))[, 2]
unlist(sapply(mtcars, shapiro.test))[3]
unlist(sapply(mtcars, shapiro.test))[4]
unlist(sapply(mtcars, shapiro.test))[5]
unlist(sapply(mtcars, shapiro.test))[6]
str(sapply(mtcars, shapiro.test))
?unlist
unlist(sapply(mtcars, shapiro.test), recursive = T, use.names = T)
p.val_shapiro <- function(x){
return(shapiro.test(x)$p.value)
}
unlist(sapply(mtcars, p.val_shapiro))
iris <- iris[,-5]
unlist(sapply(iris, p.val_shapiro))
p.val_shapiro <- function(x){
return(shapiro.test(x)$p.value)
}
normality.test  <- function(x){
return(unlist(sapply(x, p.val_shapiro)))
}
normality.test(mtcars[,1:6])
library(ggplot2)
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
geom_smooth()
# –ø–æ—Å—Ç—Ä–æ–∏–º –ø—Ä–æ—Å—Ç—É—é –ª–∏–Ω–µ–π–Ω—É—é –º–æ–¥–µ–ª—å
lm1 <- lm(Education ~ Examination, swiss)
lm(Education ~ Examination, swiss)
summary(lm1)
summary(lm1)
library(ggplot2)
my_df <- read.csv('train.csv', sep = ';')
setwd("~/R/Projects/–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤ R/3 –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ R —á–∞—Å—Ç—å 2")
my_df <- read.csv('train.csv', sep = ';')
View(my_df)
str(my_df)
my_df <- read.csv('train.csv', sep = ';', stringsAsFactors = T)
str(my_df)
View(my_df)
ggplot(my_df, aes(read, math, col = gender))+
geom_point()+
facet_grid(.~hon)+
theme(axis.text = element_text(size=25),
axis.title = element_text(size=25, face="bold"))
fit <- glm(hon ~ read + math + gender, my_df, family = 'binomial')  # –≤–º–µ—Å—Ç–æ lm –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è glm
fit
# family = binomial - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
summary(fit)
exp(fit$coefficients)  # –ø–µ—Ä–µ–π–¥–µ–º –æ—Ç –ª–æ–≥–∞—Ä–∏—Ñ–º–∞ odds –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º odds
head(predict(object = fit, type = 'response'))
head(predict(object = fit, type = 'response')) # –ø–æ–ª—É—á–∏–º —Å—Ä–∞–∑—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
my_df$prob <- predict(object = fit, type = 'response')
View(my_df)
my_df <- mtcars
str(my_df)
?mtcars
my_df$cyl <- as.factor(my_df$cyl)
str(my_df)
my_df$vs <- as.factor(my_df$vs)
str(my_df)
fit <- glm(am ~ disp + vs + mpg, my_df, family = 'binomial')  # –≤–º–µ—Å—Ç–æ lm –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è glm
fit <- glm(am ~ disp + vs + mpg, my_df, family = 'binomial')  # –≤–º–µ—Å—Ç–æ lm –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è glm
summary(fit)
my_df$am <- as.factor(my_df$am)
str(my_df)
fit <- glm(am ~ disp + vs + mpg, my_df, family = 'binomial')  # –≤–º–µ—Å—Ç–æ lm –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è glm
summary(fit)
str(my_df)
fit <- glm(am ~ disp + vs + mpg, my_df, family = 'binomial')  # –≤–º–µ—Å—Ç–æ lm –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è glm
fit
summary(fit)
my_df$cyl <- as.factor(my_df$cyl)
my_df$vs <- as.factor(my_df$vs)
my_df$am <- as.factor(my_df$am)
fit <- glm(am ~ disp + vs + mpg, my_df, family = 'binomial')  # –≤–º–µ—Å—Ç–æ lm –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è glm
summary(fit)
my_df <- mtcars
fit <- glm(am ~ disp + vs + mpg, my_df, family = 'binomial')  # –≤–º–µ—Å—Ç–æ lm –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è glm
summary(fit)
str(mtcars)
library(ggplot2)
library(ggplot2)
str(ToothGrowth)
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
str(ToothGrowth)
obj <- ggplot(data = ToothGrowth, aes(x = supp, y = len, fill = dose))+
boxplot()
?boxplot
obj <- ggplot(data = ToothGrowth, aes(x = supp, y = len, fill = dose))+
geom_boxplot()
ggplot(data = ToothGrowth, aes(x = supp, y = len, fill = dose))+
geom_boxplot()
install.packages("ROCR")
library(ROCR)
my_df <- read.csv('train.csv', sep = ';', stringsAsFactors = T)  # –¥–∞–Ω–Ω—ã–µ: –∫–∞–∫ –Ω–∞ —Ç–æ, –ø–æ–ª—É—á–∏–ª –∏–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª —É—á–µ–Ω–∏–∫ –∫—Ä–∞—Å–Ω—ã–π –¥–∏–ø–ª–æ–º,
########################################################################
library(ggplot2)
my_df <- read.csv('train.csv', sep = ';', stringsAsFactors = T)  # –¥–∞–Ω–Ω—ã–µ: –∫–∞–∫ –Ω–∞ —Ç–æ, –ø–æ–ª—É—á–∏–ª –∏–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª —É—á–µ–Ω–∏–∫ –∫—Ä–∞—Å–Ω—ã–π –¥–∏–ø–ª–æ–º,
# –≤–ª–∏—è–µ—Ç –µ–≥–æ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å
str(my_df)
# –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
ggplot(my_df, aes(read, math, col = gender))+
geom_point()+
facet_grid(.~hon)+
theme(axis.text = element_text(size=25),
axis.title = element_text(size=25, face="bold"))
# –ø—Ä–æ–ø–∏—à–µ–º —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
fit <- glm(hon ~ read + math + gender, my_df, family = 'binomial')  # –≤–º–µ—Å—Ç–æ lm –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è glm
# family = binomial - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
summary(fit)
exp(fit$coefficients)  # –ø–µ—Ä–µ–π–¥–µ–º –æ—Ç –ª–æ–≥–∞—Ä–∏—Ñ–º–∞ odds –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º odds
########################################################################
head(predict(object = fit))  # –ø–æ–ª—É—á–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –ª–æ–≥–∞—Ä–∏—Ñ–º–∞ –æ—Ç odds –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å–ø—ã—Ç—É–µ–º–æ–≥–æ
head(predict(object = fit, type = 'response')) # –ø–æ–ª—É—á–∏–º —Å—Ä–∞–∑—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
# –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å–ø—ã—Ç—É–µ–º–æ–≥–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –æ–Ω –æ–∫–æ–Ω—á–∏—Ç —à–∫–æ–ª—É —Å –∫—Ä–∞—Å–Ω—ã–º –¥–∏–ø–ª–æ–º–æ–º
my_df$prob <- predict(object = fit, type = 'response')
# –±–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –Ω–∞–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
pred_fit <- prediction(my_df$prob, my_df$hon)  # –ø–æ–º–µ—â–∞–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
perf_fit <- performance(pred_fit, "tpr", "fpr")
plot(perf_fit, colorize=T, print.cutoffs.at = seq(0,1,by=0,1))
pred_fit <- prediction(my_df$prob, my_df$hon)  # –ø–æ–º–µ—â–∞–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
perf_fit <- performance(pred_fit, "tpr", "fpr")
plot(perf_fit, colorize=T, print.cutoffs.at = seq(0,1,by=0,1))
plot(perf_fit, colorize=T, print.cutoffs.at = seq(0.1,by=0.1))
auc <- performance(pred_fit, measure = "auc")
auc
str(auc)
plot(perf_fit, colorize=T, print.cutoffs.at = seq(0.1,by=0.1))
# —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å - —ç—Ç–æ —Ç–æ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –Ω–∞–º —É–¥–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å
# –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∏—Å—Ö–æ–¥ —Å–æ–±—ã—Ç–∏—è
perf3 <- performance(pred_fit, x.measure = "cutoff", measure = "spec")
perf4 <- performance(pred_fit, x.measure = "cutoff", measure = "sens")
perf5 <- performance(pred_fit, x.measure = "cutoff", measure = "acc")
plot(perf3, col = "red", lwd = 2)
perf4 <- performance(pred_fit, x.measure = "cutoff", measure = "sens")
plot(add=T, perf4, col = "green", lwd = 2)
plot(add=T, perf5, lwd=2)
legend(x = 0.6, y = 0.3, c("spec", "sens", "accur"))
legend(x = 0.6, y = 0.3, c("spec", "sens", "accur"),
lty=1, col=c("red", "green", "black"), bty = 'n', cex = 1, lwd = 2)
plot(perf3, col = "red", lwd = 2)
plot(add=T, perf4, col = "green", lwd = 2)
plot(add=T, perf5, lwd=2)
legend(x = 0.6, y = 0.3, c("spec", "sens", "accur"),
lty=1, col=c("red", "green", "black"), bty = 'n', cex = 1, lwd = 2)
# –ø–æ—Ä–æ–≥ –æ—Ç—Å–µ—á–µ–Ω–∏—è —Ä–∞–∑—É–º–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ —Ç—Ä–µ—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
abline(v=0.225, lwd=2)
# —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é pred_respond, –∏ —ç—Ç–æ —É–∂–µ –±—É–¥–µ—Ç –Ω–µ –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å,
# –∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –ª–∏–±–æ –ø–æ–ª—É—á–∏–ª –∫—Ä–∞—Å–Ω—ã–π –¥–∏–ø–ª–æ–º, –ª–∏–±–æ –Ω–µ—Ç
my_df$pred_resp <- factor(ifelse(my_df$prob > 0.225, 1, 0), labels = c("N", "Y"))
# –¥–∞–ª–µ–µ –º—ã –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –≥–¥–µ –∑–∞–ø–∏—à–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –º—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–ª–∏
# —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –∏—Å—Ö–æ–¥–∞
my_df$correct <- ifelse(my_df$pred_resp == my_df$hon, ),
# –¥–∞–ª–µ–µ –º—ã –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –≥–¥–µ –∑–∞–ø–∏—à–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –º—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–ª–∏
# —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –∏—Å—Ö–æ–¥–∞
my_df$correct <- ifelse(my_df$pred_resp == my_df$hon, 1, 0)
View(fit)
View(fit)
View(my_df)
ggplot(my_df, aes(prob, fill = factor(correct)))+
geom_dotplot()+
theme(axis.text=element_text(size=25),
axis.title=element_text(size=25,face="bold"))
#—Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π:
mean(my_df$correct)
setwd("~/R/Projects/–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤ R/3 –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ R —á–∞—Å—Ç—å 2")
